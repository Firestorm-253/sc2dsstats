@page "/stats"
@page "/stats/{mode}"
@page "/stats/{mode}/{timespan}"
@page "/stats/{mode}/{timespan}/{interest}"
@page "/stats/{mode}/{timespan}/{interest}/{player}"
@page "/stats/{mode}/{timespan}/{interest}/{player}/{vs}"

@using sc2dsstats._2022.Shared
@using sc2dsstats.app.Services
@using static sc2dsstats._2022.Shared.DSData
@inject IDataService dataService
@inject NavigationManager _nav
@inject ReplayService replayService
@implements IDisposable

<sc2dsstats.rlib.StatsComponent @ref="statsComponent" Request="Request" onOptionsChanged="SetOptions" dataService="dataService" playerStats="true"></sc2dsstats.rlib.StatsComponent>

@code {

    [Parameter]
    public string timespan { get; set; }
    [Parameter]
    public string mode { get; set; }
    [Parameter]
    public string interest { get; set; }
    [Parameter]
    public string player { get; set; }
    [Parameter]
    public string vs { get; set; }

    DsRequest Request;

    sc2dsstats.rlib.StatsComponent statsComponent;

    protected override void OnInitialized()
    {
        Request = new DsRequest("Winrate", "This Year", true, "ALL", "ALL");
        Request.Filter = new DsFilter()
        {
            GameEnts = DSData.gamemodes.Select(s => new _2022.Shared.EditEnt() { ent = s, selected = false }).ToList(),
            PlayerEnts = replayService.AppConfig.Config.PlayersNames.Where(x => !String.IsNullOrEmpty(x)).Select(s => new _2022.Shared.EditEnt() { ent = s }).ToList(),
            GameModes = new List<int>() { (int)Gamemode.Commanders, (int)Gamemode.CommandersHeroic }
        };

        Request.Filter.GameEnts.First(f => f.ent == "GameModeCommanders").selected = true;
        Request.Filter.GameEnts.First(f => f.ent == "GameModeCommandersHeroic").selected = true;
        Request.Filter.GameModes = Request.Filter.GameEnts.Where(x => x.selected).Select(s => (int)DSData.GetGameMode(s.ent)).ToList();
        Request.Filter.Players = new List<string>();
        Request.Filter.StartTime = Request.StartTime;
        Request.Filter.EndTime = Request.EndTime;


        ParseOptions();
        replayService.CollectReplayStats += c_CollectReplayStats;
        base.OnInitialized();
    }

    void ParseOptions()
    {
        if (!String.IsNullOrEmpty(mode))
        {
            if (DSData.modes.Contains(mode))
                Request.SetMode(mode);

            if (!String.IsNullOrEmpty(timespan))
            {
                if (DSData.timespans.Contains(timespan))
                {
                    Request.SetTime(timespan);
                }

                if (!String.IsNullOrEmpty(interest))
                {
                    if (interest == "ALL" || DSData.cmdrs.Contains(interest))
                        Request.Interest = interest;

                    if (!String.IsNullOrEmpty(player))
                    {
                        bool isplayer = false;
                        if (bool.TryParse(player, out isplayer))
                            Request.SetPlayer(isplayer);
                    }
                    if (!String.IsNullOrEmpty(vs))
                    {
                        if (vs == "ALL" || DSData.cmdrs.Contains(vs))
                            Request.Versus = vs;
                    }
                }
            }
        }
    }

    void SetOptions(DsRequest request)
    {
        Request = request;
        // _nav.NavigateTo($"/stats/{Request.Mode}/{Request.Timespan}/{request.Interest}/{request.Player}/{request.Versus}");
    }

    private void c_CollectReplayStats(object sender, CollectEventArgs e)
    {
        _ = statsComponent.LoadData(Request);
    }

    public void Dispose()
    {
        replayService.CollectReplayStats -= c_CollectReplayStats;
    }

}
