@page "/dummy"

@using System.ComponentModel
@using Microsoft.AspNetCore.Components.Forms
@using sc2dsstats.lib.Data
@using sc2dsstats.shared.Service
@using sc2dsstats.shared
@inject ChartService _chart
@inject DSoptions _options

<WebOptions />

<div>
    <canvas id="canvas"></canvas>
</div>


@code {

    bool Loading = true;

    protected override void OnInitialized()
    {
        _options.DefaultFilter();
        _options.Mode = "Timeline";
        _options.Interest = "Nova";

        Loading = false;

        if (DSdata.Config.Players.Any())
        {
            _options.Player = true;
            foreach (var ent in _options.Players.Where(x => x.Value == true))
                _options.Dataset.Add(ent.Key);
        }
        _options.PropertyChanged += OptionChanged;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _chart.Init(_options).GetAwaiter();
            _options.Update = !_options.Update;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async void OptionChanged(object sender, PropertyChangedEventArgs e)
    {
        if (String.IsNullOrEmpty(_options.Mode) || _options.Mode == "Build" || _options.Mode == "Database")
            return;

        if (Loading == false)
        {
            Loading = true;

            foreach (var ent in _options.CmdrsChecked.Keys.ToArray())
                _options.CmdrsChecked[ent] = false;
            if (!String.IsNullOrEmpty(_options.Interest))
                _options.CmdrsChecked[_options.Interest] = true;

            await InvokeAsync(() => StateHasChanged());

            if (e.PropertyName == "BeginAtZero")
                await _chart.ChangeOption(_options);
            else
                await _chart.ChartHandler(_options);


            Loading = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }
}