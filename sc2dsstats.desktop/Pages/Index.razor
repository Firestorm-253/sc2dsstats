@page "/"
@using sc2dsstats.desktop.Service
@using sc2dsstats.lib.Data
@using sc2dsstats.lib.Db
@using System.IO
@inject DSoptions _options
@inject DBService _db

<h2 class="text-primary">
    sc2dsstats
    <small class="text-muted">Starcraft 2 Direct Strike Statistics</small>
</h2>
<!--
<h4>Update available: @DSdata.DesktopUpdateAvailable</h4>
-->
@if (Status.isFirstRun && DSdata.DesktopStatus.FoldersReplays == 0)
{
    <div class="container">
        <h3>Welcome to sc2dsstats - this is your first run, so please check the options and press Save.</h3>
        <h4>You can change the settings at any time at 'Settings' in the Nav menu</h4>
    </div>
    <UserSettingsPage />
}
else
{
    <br />
    @if (UpdateAvailable)
    {
        <div>
            <h4 class="text-info"><b>New Version @ElectronService.AvailableVersion.ToString() available!</b></h4>
            @* <button type="button" class="btn btn-danger">Download and Install New Version</button> *@
        </div>
    }
    <div class="row">
        <div class="col">
            <Scan />
        </div>
        <div class="col">
            <sc2dsstats.shared.WebPlayerStats />
        </div>

    </div>
}
<br />
<div>
    <h4>Latest Game <button type="button" class="btn btn-sm btn-inline-dark"
            @onclick="@(() => _options.Replay = _db.GetLatestReplay())">Refresh</button></h4>
    <Game />
</div>
@code {
    bool oldDataExists = false;
    bool UpdateAvailable = false;

    protected override void OnInitialized()
    {
        if (Status.isFirstRun && File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) +
        "\\sc2dsstats_web\\data.json"))
        {
            oldDataExists = true;

        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            CheckUpdates();
        }
        base.OnAfterRender(firstRender);
    }

    private async Task CheckUpdates()
    {
        if (ElectronService.CurrentVersion == new Version(2, 0, 0))
        {
            await Task.Delay(10000);
            ElectronService.CheckForUpdate();
        }
        else
        {
            UpdateAvailable = ElectronService.AvailableVersion > ElectronService.CurrentVersion;
        }
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task Update()
    {
        await ElectronService.DownloadNewVersion(true);
    }
}