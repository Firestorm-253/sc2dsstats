@using System.Numerics
@using sc2dsstats._2022.Shared
@using System.Globalization

<style>
    .vbuildarea {
        width: 500px;
        min-width: 500px !important;
        height: 773px;
        min-height: 773px !important;
        background-color: #a6a4ca;
        border: inset 2px darkblue;
        transition: border-width 0.3s linear;
    }

    .vbuildrotate {
        transform: rotate(180deg);
    }

    .v2buildrotate {
        transform: rotate(-45deg);
    }

    .xmirror {
        -webkit-transform: scaleX(-1);
        transform: scaleX(-1);
    }
</style>

<div class="position-relative vbuildarea xmirror" id="BuildArea">
    @if (Pos > 3)
    {
        <div class="position-absolute d-inline-block" style="top: 1%; left: 90%;">
            <span class="oi oi-arrow-thick-right" aria-hidden="true"></span>
        </div>
        <div class="position-absolute d-inline-block" style="top: 95%; left: 90%">
            <span class="oi oi-arrow-thick-right" aria-hidden="true"></span>
        </div>
    }
    else
    {
        <div class="position-absolute d-inline-block" style="top: 1%; left: 5%;">
            <span class="oi oi-arrow-thick-left" aria-hidden="true"></span>
        </div>
        <div class="position-absolute d-inline-block" style="top: 95%; left: 5%;">
            <span class="oi oi-arrow-thick-left" aria-hidden="true"></span>
        </div>
    }
    <div class="no-gutters buildarea_layer">
        @foreach (var unit in Breakpoint.Units)
        {
            @foreach (var pos in unit.Positions)
            {
                var relpos = GetRelPos(pos);
                    <div class="position-absolute d-inline-block unitimage xmirror" style="margin-left: @(relpos.Key.ToString(CultureInfo.InvariantCulture))px; margin-top: @(relpos.Value.ToString(CultureInfo.InvariantCulture))px;">
                        <div style="max-height: 20px; max-width: 20px;" @onclick="@(() => Interest = unit.Name)">
                            @if (Interest == unit.Name)
                            {
                                <p class="text-danger" style="transform: rotate(-45deg);"><small>@unit.Name</small></p>
                            }
                            else
                            {
                                <p class="text-secondary" style="transform: rotate(-45deg);"><small>@unit.Name</small></p>
                            }
                        </div>
                    </div>
                }
            }
    </div>

</div>

@code {
    [Parameter]
    public DsGameResponse Replay { get; set; }

    [Parameter]
    public DsPlayerBreakpointResponse Breakpoint { get; set; }

    [Parameter]
    public int Pos { get; set; }

    string Interest = String.Empty;
    public static Vector2 center = new Vector2(128, 120);

    public KeyValuePair<float, float> GetRelPos(DsPlayerBreakpointUnitPosResponse unitpos)
    {
        Vector2 pos = new Vector2(unitpos.X, unitpos.Y);
        pos = RotatePoint(pos, center, -45);
        float newx = 0;
        float newy = 0;
        if (Pos > 3)
            newx = (pos.X - 62.23907f) / 2;
        else
            newx = (pos.X - 176.79037f) / 2;

        newy = pos.Y - 107.97919f;

        float distance_left = newy;
        float distance_top = newx;

        float distance_left_percent = distance_left * 31f;
        float distance_top_percent = distance_top * 62f;
        
        return new KeyValuePair<float, float>(distance_top_percent, distance_left_percent);
    }

    public static Vector2 RotatePoint(Vector2 pointToRotate, Vector2 centerPoint, double angleInDegrees)
    {
        double angleInRadians = angleInDegrees * (Math.PI / 180);
        double cosTheta = Math.Cos(angleInRadians);
        double sinTheta = Math.Sin(angleInRadians);
        return new Vector2
        {
            X =
                (float)
                (cosTheta * (pointToRotate.X - centerPoint.X) -
                sinTheta * (pointToRotate.Y - centerPoint.Y) + centerPoint.X),
            Y =
                (float)
                (sinTheta * (pointToRotate.X - centerPoint.X) +
                cosTheta * (pointToRotate.Y - centerPoint.Y) + centerPoint.Y)
        };
    }
}
