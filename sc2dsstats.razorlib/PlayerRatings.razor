@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using System.Globalization;
@using pax.dsstats.shared
@inject IStatsService statsService

<h3>Player Ratings</h3>

<div class="row">
    <div class="col-auto">
        <table class="table table-dark table-hover">
            <thead>
                <tr>
                    <th>ToonId</th>
                    <th>Name</th>
                    <th>DsR</th>
                </tr>
            </thead>
            <tbody>
                @if (ratingsCount > 0)
                {
                    <Virtualize Context="rating" ItemsProvider="LoadRatings">
                        <tr>
                            <td>@rating.ToonId</td>
                            <td>@rating.Name</td>
                            <td>@Math.Round(rating.DsR, 2).ToString(CultureInfo.InvariantCulture)</td>
                        </tr>
                    </Virtualize>
                }
            </tbody>
        </table>
    </div>
    <div class="col-auto">
        <p>Player Rating</p>
    </div>
</div>

@code {
    private int ratingsCount = 0;
    private Order order = new()
        {
            Property = "Dsr",
            Ascending = false
        };

    protected override void OnInitialized()
    {
        _ = SetCount();
        base.OnInitialized();
    }

    private async Task SetCount()
    {
        ratingsCount = await statsService.GetRatingsCount();
        await InvokeAsync(() => StateHasChanged());
    }

    private async ValueTask<ItemsProviderResult<PlayerRatingDto>> LoadRatings(ItemsProviderRequest request)
    {
        var numRatings = Math.Min(request.Count, ratingsCount - request.StartIndex);
        var ratings = await statsService.GetRatings(request.StartIndex,
            numRatings, order, request.CancellationToken);

        return new ItemsProviderResult<PlayerRatingDto>(ratings, ratingsCount);
    }
}
