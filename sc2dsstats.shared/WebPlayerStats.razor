@using System.Threading.Tasks
@inject sc2dsstats.lib.Db.DSReplayContext _context
@inject sc2dsstats.lib.Db.DBService _db

    
    <h4><span class="badge badge-primary">Player stats</span></h4>
    <div class="row justify-content-start">
        <div class="col col-lg-4">
            <h5>Your most played cmdr is</h5>
        </div>
        <div class="col">
            <h5><span class="badge badge-secondary">@most.Race</span><span class="badge badge-primary">@(MathF.Round((float)most.Count * 100 / (float)Stats.Stats.Sum(s => s.Count), 2))%</span></h5>
        </div>
        <div class="w-100"></div>
        <div class="col col-lg-4">
            <h5>Your best cmdr is</h5>
        </div>
        <div class="col">
            <h5><span class="badge badge-secondary">@best.Race</span><span class="badge badge-primary">@best.Winrate%</span></h5>
        </div>
        <div class="w-100"></div>
        <div class="col col-lg-4">
            <h5>Your best Matchup is</h5>
        </div>
        <div class="col">
            <h5><span class="badge badge-secondary">@Stats.BestStat.Race</span> vs <span class="badge badge-secondary">@Stats.BestStat.OppRace</span><span class="badge badge-primary">@Stats.BestStat.Winrate%</span></h5>
        </div>
        <div class="w-100"></div>
        <div class="col col-lg-4">
            <h5>Your least played cmdr is</h5>
        </div>
        <div class="col">
            <h5><span class="badge badge-secondary">@least.Race</span><span class="badge badge-primary">@(MathF.Round((float)least.Count * 100 / (float)Stats.Stats.Sum(s => s.Count), 2))%</span></h5>
        </div>
        <div class="w-100"></div>
        <div class="col col-lg-4">
            <h5>Your worst cmdr is</h5>
        </div>
        <div class="col">
            <h5><span class="badge badge-secondary">@worst.Race</span><span class="badge badge-primary">@worst.Winrate%</span></h5>
        </div>
        <div class="w-100"></div>
        <div class="col col-lg-4">
            <h5>Your worst Matchup is</h5>
        </div>
        <div class="col">
            <h5><span class="badge badge-secondary">@Stats.WorstStat.Race</span> vs <span class="badge badge-secondary">@Stats.WorstStat.OppRace</span><span class="badge badge-primary">@Stats.WorstStat.Winrate%</span></h5>
        </div>
    </div>
    <button type="button" class="btn btn-inline-dark" @onclick="ShowHide">Show/Hide Details</button>
    
<div class="@DetailClass">
    <div class="container-fluid">
        <table class="table table-sm table-hover table-dark">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Commander</th>
                    <th scope="col">vs</th>
                    <th scope="col">Games</th>
                    <th scope="col">Winrate</th>
                    <th scope="col">Duration</th>

                </tr>
            </thead>
            <tbody>
                @if (true)
                {
                    int i = 0;


                    if (best != null)
                    {
                        <tr class="table-row">
                            <td>Best Commander</td>
                            <td>@best.Race</td>
                            <td>@best.OppRace</td>
                            <td>@best.Count</td>
                            <td>@best.Winrate</td>
                            <td>@best.AvgGameDuration.ToString(@"hh\:mm\:ss")</td>
                        </tr>
                    }

                    if (worst != null)
                    {
                        <tr class="table-row">
                            <td>Worst Commander</td>
                            <td>@worst.Race</td>
                            <td>@worst.OppRace</td>
                            <td>@worst.Count</td>
                            <td>@worst.Winrate</td>
                            <td>@worst.AvgGameDuration.ToString(@"hh\:mm\:ss")</td>
                        </tr>
                    }

                    if (@Stats.BestStat != null)
                    {
                        <tr class="table-row">
                            <td>Best Matchup</td>
                            <td>@Stats.BestStat.Race</td>
                            <td>@Stats.BestStat.OppRace</td>
                            <td>@Stats.BestStat.Count</td>
                            <td>@Stats.BestStat.Winrate</td>
                            <td>@Stats.BestStat.AvgGameDuration.ToString(@"hh\:mm\:ss")</td>
                        </tr>
                    }

                    if (Stats.WorstStat != null)
                    {
                        <tr class="table-row">
                            <td>Worst Matchup</td>
                            <td>@Stats.WorstStat.Race</td>
                            <td>@Stats.WorstStat.OppRace</td>
                            <td>@Stats.WorstStat.Count</td>
                            <td>@Stats.WorstStat.Winrate</td>
                            <td>@Stats.WorstStat.AvgGameDuration.ToString(@"hh\:mm\:ss")</td>
                        </tr>
                    }


                    @foreach (sc2dsstats.lib.Models.PlayerStat Stat in Stats.Stats.OrderByDescending(o => o.Winrate))
                    {
                        i++;
                        <tr class="table-row">
                            <td>@i</td>
                            <td>@Stat.Race</td>
                            <td>@Stat.OppRace</td>
                            <td>@Stat.Count</td>
                            <td>@Stat.Winrate</td>
                            <td>@Stat.AvgGameDuration.ToString(@"hh\:mm\:ss")</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <h3>Opponent Commanders</h3>
        <table class="table table-sm table-hover table-dark">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Opponent</th>
                    <th scope="col">Games</th>
                    <th scope="col">Winrate</th>
                    <th scope="col">Duration</th>

                </tr>
            </thead>
            <tbody>
                @if (true)
                {
                    int i = 0;
                    @foreach (sc2dsstats.lib.Models.PlayerStat Stat in Stats.OppStats.OrderByDescending(o => o.Winrate))
                    {
                        i++;
                        <tr class="table-row">
                            <td>@i</td>
                            <td>@Stat.Race</td>
                            <td>@Stat.Count</td>
                            <td>@Stat.Winrate</td>
                            <td>@Stat.AvgGameDuration.ToString(@"hh\:mm\:ss")</td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <h3>Player position</h3>
        <table class="table table-sm table-hover table-dark">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Commander</th>
                    <th scope="col">Games</th>
                    <th scope="col">Winrate</th>
                    <th scope="col">Duration</th>

                </tr>
            </thead>
            <tbody>
                @if (true)
                {
                    @foreach (sc2dsstats.lib.Models.PlayerStat Stat in Stats.PosStats.OrderBy(o => o.Pos))
                    {

                        <tr class="table-row">
                            <td>@Stat.Pos</td>
                            <td>@Stat.Race</td>
                            <td>@Stat.Count</td>
                            <td>@Stat.Winrate</td>
                            <td>@Stat.AvgGameDuration.ToString(@"hh\:mm\:ss")</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {

        sc2dsstats.lib.Models.PlayerStats Stats = new lib.Models.PlayerStats();
        sc2dsstats.lib.Models.PlayerStat best = new lib.Models.PlayerStat();
        sc2dsstats.lib.Models.PlayerStat worst = new lib.Models.PlayerStat();
        sc2dsstats.lib.Models.PlayerStat most = new lib.Models.PlayerStat();
        sc2dsstats.lib.Models.PlayerStat least = new lib.Models.PlayerStat();
        string DetailClass = "d-none";

    protected override async Task OnInitializedAsync()
    {
        if (sc2dsstats.lib.Data.DSdata.PlayerStats != null)
        {
            Stats = sc2dsstats.lib.Data.DSdata.PlayerStats;
        }
        else
        {
            await Task.Delay(1000);
            await Task.Run(() =>
            {
                lock (_db.lockobject)
                {
                    Stats.Init(_context, sc2dsstats.lib.Data.DSdata.Config.Players);
                }
                sc2dsstats.lib.Data.DSdata.PlayerStats = Stats;
            });
        }
        if (Stats.Stats.Any())
        {
            best = Stats.Stats.OrderByDescending(o => o.Winrate).FirstOrDefault();
            worst = Stats.Stats.OrderBy(o => o.Winrate).FirstOrDefault();
            most = Stats.Stats.OrderByDescending(o => o.Count).FirstOrDefault();
            least = Stats.Stats.OrderBy(o => o.Count).FirstOrDefault();
        }
    }

    void ShowHide()
    {
        if (String.IsNullOrEmpty(DetailClass))
            DetailClass = "d-none";
        else
            DetailClass = String.Empty;
        StateHasChanged();
    }

}
