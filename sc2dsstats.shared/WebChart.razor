@using System.ComponentModel
@using Microsoft.AspNetCore.Components.Forms
@using sc2dsstats.lib.Data
@using sc2dsstats.shared.Service
@inject ChartService _chart
@inject DSoptions _options
@implements IDisposable

<style>
    .chartmobile {
        min-width: 650px !important;
    }

    .mybadge {
        min-width: 75px;
    }
</style>

<div>
    <div class="row">
        <div class="d-none d-xl-block mt-3">
            <div>
                <div>
                    @foreach (var ent in _options.CmdrsChecked)
                    {
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox"
                               class="custom-control-input"
                               name="CmdrIcons"
                               id="cb_@ent"
                               checked="@_options.CmdrsChecked[ent.Key]"
                               @onchange="eventArgs => { IconClick(ent.Key, eventArgs.Value); }" />
                        <label class="custom-control-label" for="cb_@ent">
                            <img alt="img_@ent" longdesc="img_@ent" src="@DSdata.GetIcon(ent.Key)" width="30" height="30" />
                            @ent.Key
                        </label>
                    </div>
                    <div class="collapse">@ent.Value</div>
                    }
                </div>
            </div>
        </div>
        <div class="@ChartClass">
            <div class="row ml-4">
                <div class="mr-3">
                    @if (Loading)
                    {
                        <button class="btn btn-primary ml-1" disabled>
                            <span class="spinner-border spinner-border-sm"></span>
                            Chart
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary ml-4" disabled>
                            Chart
                        </button>
                    }
                </div>
                <div class="form-group mr-2">
                    <span class="badge badge-danger mybadge mr-2">
                        &sum; Games<br />@_options.Cmdrinfo.Games
                    </span>
                </div>

                <div class="form-group mr-2">
                    <span class="badge badge-danger mybadge mr-2">
                        &empty; @_options.Mode<br />@_options.Cmdrinfo.AWinrate
                    </span>
                </div>
                <div class="form-group mr-2">
                    <span class="badge badge-danger mybadge mr-2">
                        &empty; Duration<br />@_options.Cmdrinfo.ADuration.ToString(@"hh\:mm\:ss")
                    </span>
                </div>
                @if (_options.Dataset != "")
                {
                    var dataset = DSdata.Datasets.SingleOrDefault(s => s.Dataset == _options.Dataset);
                    if (dataset != null)
                    {
                        <div class="form-group mr-2">
                            <span class="badge badge-info mr-2">
                                Dataset<br />@dataset.Dataset.Substring(0, 5)
                            </span>
                        </div>
                        <div class="form-group mr-2">
                            <span class="badge badge-info mr-2">
                                Teamgames<br />@(Math.Round((double)dataset.Teamgames * 100 / (double)dataset.Count, 2))%
                            </span>
                        </div>
                    }
                }

            </div>
                @if (ShowHideCmdr)
                {
                <div class="@CmdrClass" id="chart-wrapper">
                    <sc2dsstats.shared.WebCmdrs />
                </div>
                }
                <div class="@ChartHideClass">
                    <canvas id="canvas"></canvas>
                </div>
        </div>
    </div>
    <div class="@InfoClass">
        <div class="row">
            <div>
                <div style="width: 400px;">
                    <p>@DSdata.INFO[_options.Mode]</p>
                </div>
            </div>
            <div>
                <div style="width: 400px; font-size: 12px; overflow: hidden; margin-left: 10px;">
                    <p>Info</p>
                </div>
            </div>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="@(() => ShowHideCmdr = !ShowHideCmdr)">Cmdrs played</button>
        </div>
    </div>
    <div class="d-xl-none">
        <button type="button" class="btn btn-sm btn-secondary" @onclick="@ShowInfo">Info</button>
    </div>
</div>

@code {
    private bool Loading = true;
    //private string ChartClass = "w-75";
    private string ChartClass = "w-75 chartmobile";
    private string interest = "ALL";
    private bool ShowHideCmdr = false;
    string CmdrClass => ShowHideCmdr ? null : "collapse";
    string ChartHideClass => ShowHideCmdr ? "collapse" : null;
    string InfoClass = "d-none d-xl-block";
    private object lockobject = new object();

    protected override async Task OnInitializedAsync()
    {
        _options.DefaultFilter();
        _options.Mode = "Winrate";

        await ChartService.Init(_options);

        _options.PropertyChanged += OptionChanged;
        Loading = false;
        _options.Update = !_options.Update;
    }

    void ShowInfo()
    {
        if (String.IsNullOrEmpty(InfoClass))
            InfoClass = "d-none d-xl-block";
        else
            InfoClass = "";
    }

    async Task IconClick(string cmdr, object cbValue)
    {
        _options.CmdrsChecked[cmdr] = !_options.CmdrsChecked[cmdr];
        if ((bool)cbValue)
        {
            _options.Interest = cmdr;
            await ChartService.RemoveDataset(_options, "global", lockobject);
            await ChartService.GetChartBase(_options);

            foreach (var ent in _options.CmdrsChecked.Where(x => x.Value == true && x.Key != cmdr))
            {
                _options.CmdrsChecked[ent.Key] = false;
                await InvokeAsync(() => StateHasChanged());
            }

            /*
            if (_options.GetCmdrsChecked().Count == 1)
            {
                await ChartService.RemoveDataset(_options, "global", lockobject);
                await ChartService.GetChartBase(_options);
            }
            else
            {
                await ChartService.AddDataset(_options, lockobject);
            }
            */
        }
        else
        {
            _options.Interest = "";
            await ChartService.GetChartBase(_options);

            /*
            if (_options.GetCmdrsChecked().Count == 0)
            {
                ChartService.GetChartBase(_options);
            } else
                ChartService.RemoveDataset(_options, cmdr, lockobject);
            */
        }
    }


    private async void OptionChanged(object sender, PropertyChangedEventArgs e)
    {
        if (String.IsNullOrEmpty(_options.Mode) || _options.Mode == "Build" || _options.Mode == "Database")
            return;

        if (Loading == false)
        {
            Loading = true;
            await InvokeAsync(() => StateHasChanged());
            await _chart.ChartHandler(_options);

            Loading = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    public void Dispose()
    {
        _options.PropertyChanged -= OptionChanged;
    }
}
