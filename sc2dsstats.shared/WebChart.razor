@using System.ComponentModel
@using sc2dsstats.lib.Data
@using sc2dsstats.shared.Service
@using Microsoft.AspNetCore.Components.Forms
@inject ChartService _chart
@inject DSoptions _options
@implements IDisposable

<style>
    .chartmobile {
        min-width: 650px !important;
    }

    .mybadge {
        min-width: 75px;
    }
    /* The switch - the box around the slider */
    .switch {
        position: relative;
        display: inline-block;
        width: 45px !important;
        height: 20px !important;
    }

        /* Hide default HTML checkbox */
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    /* The slider */
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 15px !important;
            width: 15px !important;
            left: 2px !important;
            bottom: 2px !important;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(13px);
        -ms-transform: translateX(13px);
        transform: translateX(13px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 17px !important;
    }

        .slider.round:before {
            border-radius: 50%;
        }

    .cursor-pointer {
        cursor: pointer;
    }
</style>
<div class="d-none d-xl-block">
    <div class="navbar navbar-expand-lg navbar-dark bg-primary">
        <a class="navbar-brand" data-target="#Winrate">ChartModes</a>
        <button class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="@NavMenuCssClass navbar-collapse" id="navbarModes">
            <ul class="navbar-nav mr-auto">
                @foreach (string mode in DSdata.s_chartmodes)
                {
                    string dataTarget = "#" + mode;
                    string isActive = (_options.Mode == mode) ? "active" : "";
                    <li class="nav-item cursor-pointer">
                        <a class="nav-link @isActive" data-target="@dataTarget" @onclick="@(() => _options.Mode = mode)">
                            @mode
                        </a>
                    </li>
                }
                <li class="ml-4">
                    <div class="position-absolute">
                        <EditForm Model="@_options" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="row">
                                <div class="form-group col-xs-4 col-md-4">
                                    <label for="cbplayer">
                                        Player
                                    </label>
                                    <label id="cbplayer" class="switch">
                                        <InputCheckbox @bind-Value="_options.Player" />
                                        <span class="slider round"></span>
                                    </label>
                                </div>
                                <div class="form-group col-xs-4 col-md-4">
                                    <label for="cbzero">
                                        BeginAtZero
                                    </label>
                                    <label id="cbzero" class="switch">
                                        <InputCheckbox @bind-Value="_options.BeginAtZero" />
                                        <span class="slider round"></span>
                                    </label>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </li>
            </ul>
        </div>
    </div>
    <div class="navbar navbar-expand-lg navbar-dark bg-dark">
        <a class="navbar-brand" data-target="#Winrate">TimeSpan</a>
        <button class="navbar-toggler" @onclick="ToggleNavMenu2">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="@NavMenuCssClass2 navbar-collapse" id="navbarTimes">
            <ul class="navbar-nav mr-auto">
                @foreach (string timespan in DSdata.s_timespans)
                {
                    string dataTarget2 = "#" + timespan;
                    string isActive2 = (_options.Time == timespan) ? "active" : "";
                    <li class="nav-item cursor-pointer">
                        <a class="nav-link @isActive2" data-target="@dataTarget2" @onclick="@(() => Gametime(timespan))">
                            @timespan
                        </a>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>
<div class="d-xl-none">
    <WebOptions />
</div>
<div>
    <div class="row">
        <div class="d-none d-xl-block">
            <div class="navbar navbar-dark bg-dark">
                <button class="navbar-toggler" @onclick="ToggleNavMenu3">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="@NavMenuCssClass3 navbar-collapse" id="navbarIcons">
                    <ul class="navbar-nav mr-auto">
                        @foreach (var ent in _options.CmdrsChecked)
                        {
                            string dataTarget3 = "#" + ent.Key;
                            string isActive3 = ent.Value ? "active" : "";
                            <li class="nav-item cursor-pointer">
                                <a class="nav-link m-0 @isActive3" style="padding: 0.5px;" data-target="@dataTarget3" @onclick="@(async => IconClick(ent.Key, !ent.Value))">
                                    <img alt="img_@ent" aria-hidden="true" longdesc="img_@ent" src="@DSdata.GetIcon(ent.Key)" width="30" height="30" />
                                    @ent.Key
                                </a>
                                <div class="collapse">@ent.Value</div>
                            </li>

                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="@ChartClass">
            <div class="row ml-4">
                <div class="mr-3">
                    @if (Loading)
                    {
                        <button class="btn btn-primary ml-1" disabled>
                            <span class="spinner-border spinner-border-sm"></span>
                            Chart
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary ml-4" disabled>
                            Chart
                        </button>
                    }
                </div>
                <div class="d-none d-xl-block">
                    <div class="mr-5">
                        <button class="btn btn-light" @onclick="OpenDialog">Filter</button>
                    </div>
                </div>
                <div class="form-group mr-2">
                    <h5>
                        <span class="badge badge-danger mybadge mr-2">
                            &sum; Games<br />@_options.Cmdrinfo.Games
                        </span>
                    </h5>
                </div>

                <div class="form-group mr-2">
                    <h5>
                        <span class="badge badge-danger mybadge mr-2">
                            &empty; @_options.Mode<br />@_options.Cmdrinfo.AWinrate%
                        </span>
                    </h5>
                </div>
                <div class="form-group mr-2">
                    <h5>
                        @if (_options.Mode == "Timeline")
                        {
                            <span class="badge badge-danger mybadge mr-2">
                                &empty; Step<br />@_options.Cmdrinfo.ADuration.Days
                            </span>
                        }
                        else
                        {
                            <span class="badge badge-danger mybadge mr-2">
                                &empty; Duration<br />@_options.Cmdrinfo.ADuration.ToString(@"hh\:mm\:ss")
                            </span>
                        }
                    </h5>
                </div>
                @if (_options.Dataset.Any())
                {
                    var dataset = DSdata.Datasets.SingleOrDefault(s => _options.Dataset.Contains(s.Dataset));
                    if (dataset != null)
                    {
                        <div class="form-group mr-2">
                            <h5>
                                <span class="badge badge-info mr-2">
                                    Dataset<br />@dataset.Dataset.Substring(0, 5)
                                </span>
                            </h5>
                        </div>
                        <div class="form-group mr-2">
                            <h5>
                                <span class="badge badge-info mr-2">
                                    Winrate<br />@dataset.Winrate%
                                </span>
                            </h5>
                        </div>
                        <div class="form-group mr-2">
                            <h5>
                                <span class="badge badge-info mr-2">
                                    Teamgames<br />@dataset.Teamgames%
                                </span>
                            </h5>
                        </div>
                    }
                }

            </div>
            @if (ShowHideCmdr)
            {
                <div class="@CmdrClass" id="chart-wrapper">
                    <sc2dsstats.shared.WebCmdrs />
                </div>
            }
            <div class="@ChartHideClass">
                <canvas id="canvas"></canvas>
            </div>
        </div>
    </div>
    <div class="@InfoClass">
        <div class="row">
            <div>
                <div style="width: 400px;">
                    <p>@DSdata.INFO[_options.Mode]</p>
                </div>
            </div>
            <div>
                <div style="width: 400px; font-size: 12px; overflow: hidden; margin-left: 10px;">
                    <p>Info</p>
                </div>
            </div>
            <div>
                <button type="button" class="btn btn-secondary mt-2" @onclick="@(() => ShowHideCmdr = !ShowHideCmdr)"><span class="oi oi-pie-chart mr-1"></span>Cmdrs played</button>
            </div>
        </div>
    </div>
    <div class="d-xl-none">
        <button type="button" class="btn btn-sm btn-secondary" @onclick="@ShowInfo">Info</button>
    </div>
</div>

<OptionsDialog @ref="myDialog" />

@code {
    [Parameter]
    public WebOptions webOptions { get; set; }


    private bool Loading = true;
    //private string ChartClass = "w-75";
    private string ChartClass = "w-75 chartmobile";
    private string interest = "ALL";
    private bool ShowHideCmdr = false;
    string CmdrClass => ShowHideCmdr ? null : "collapse";
    string ChartHideClass => ShowHideCmdr ? "collapse" : null;
    string InfoClass = "d-none d-xl-block";
    private object lockobject = new object();

    private bool collapseNavMenu = false;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private bool collapseNavMenu2 = false;
    private string NavMenuCssClass2 => collapseNavMenu2 ? "collapse" : null;
    private bool collapseNavMenu3 = false;
    private string NavMenuCssClass3 => collapseNavMenu3 ? "collapse" : null;

    OptionsDialog myDialog;

    protected override void OnInitialized()
    {
        _options.DefaultFilter();
        _options.Mode = "Winrate";

        Loading = false;

        if (DSdata.Config.Players.Any())
        {
            _options.Player = true;
            foreach (var ent in _options.Players.Where(x => x.Value == true))
                _options.Dataset.Add(ent.Key);
        }
        _options.PropertyChanged += OptionChanged;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _chart.Init(_options).GetAwaiter();
            _options.Update = !_options.Update;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    void OpenDialog()
    {
        myDialog.Show();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ToggleNavMenu2()
    {
        collapseNavMenu2 = !collapseNavMenu2;
    }

    private void ToggleNavMenu3()
    {
        collapseNavMenu3 = !collapseNavMenu3;
    }

    private void HandleValidSubmit()
    {
        //Console.WriteLine("valid");
    }

    void ShowInfo()
    {
        if (String.IsNullOrEmpty(InfoClass))
            InfoClass = "d-none d-xl-block";
        else
            InfoClass = "";
    }

    async Task IconClick(string cmdr, bool cbValue)
    {
        Loading = true;
        await InvokeAsync(() => StateHasChanged());

        _options.CmdrsChecked[cmdr] = !_options.CmdrsChecked[cmdr];

        if ((bool)cbValue)
        {
            _options.Interest = cmdr;
            if (_options.Chart.data.datasets.Count == 0 || (_options.Chart.data.datasets.Count == 1 && _options.Chart.data.datasets.First().label == "global"))
                await _chart.ChartHandler(_options);
            else
                await _chart.AddDataset(_options, lockobject);
        }
        else
        {
            await _chart.RemoveDataset(_options, cmdr, lockobject);
            if (!_options.Chart.data.datasets.Any())
            {
                _options.Interest = "";
                if (_options.Chart.type == "bar")
                    await _chart.ChartHandler(_options);
            }
        }
        Loading = false;
        await InvokeAsync(() => StateHasChanged());
    }


    private async void OptionChanged(object sender, PropertyChangedEventArgs e)
    {
        if (String.IsNullOrEmpty(_options.Mode) || _options.Mode == "Build" || _options.Mode == "Database")
            return;

        if (Loading == false)
        {
            Loading = true;

            foreach (var ent in _options.CmdrsChecked.Keys.ToArray())
                _options.CmdrsChecked[ent] = false;
            if (!String.IsNullOrEmpty(_options.Interest))
                _options.CmdrsChecked[_options.Interest] = true;

            await InvokeAsync(() => StateHasChanged());

            if (e.PropertyName == "BeginAtZero")
                await _chart.ChangeOption(_options);
            else
                await _chart.ChartHandler(_options);


            Loading = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private void Gametime(string timespan)
    {
        _options.Time = timespan;
        int i = Array.FindIndex(DSdata.s_timespans, f => f == timespan);
        // this month
        if (i == 0)
        {
            _options.Startdate = DateTime.Today.AddDays(-(DateTime.Today.Day - 1));
            _options.Enddate = DateTime.MinValue;
        }

        // last month
        else if (i == 1)
        {
            _options.Startdate = DateTime.Today.AddDays(-(DateTime.Today.Day - 1)).AddMonths(-1);
            _options.Enddate = DateTime.Today.AddDays(-(DateTime.Today.Day - 1)).AddDays(-1);
        }

        // this year
        else if (i == 2)
        {
            _options.Startdate = new DateTime(DateTime.Now.Year, 1, 1);
            _options.Enddate = DateTime.MinValue;
        }
        // last year
        else if (i == 3)
        {
            _options.Startdate = new DateTime(DateTime.Now.Year - 1, 1, 1);
            _options.Enddate = new DateTime(DateTime.Now.Year, 1, 1);
        }
        // all
        else if (i == 4)
        {
            _options.Startdate = DateTime.MinValue;
            _options.Enddate = DateTime.MinValue;
        }

        _options.Update = !_options.Update;

    }

    public void Dispose()
    {
        _options.PropertyChanged -= OptionChanged;
    }
}
