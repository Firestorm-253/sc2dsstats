@using System.ComponentModel
@using Microsoft.AspNetCore.Components.Forms
@using sc2dsstats.lib.Data
@using sc2dsstats.shared.Service
@inject DSoptions _options
@inject ChartService _chart
@implements IDisposable

<style>
    .chartmobile {
        min-width: 650px !important;
    }
</style>

<div>
    <div class="row">
        <div class="d-none d-xl-block mt-3">
            <div>
                <div>
                    @foreach (var ent in DSdata.s_races)
                    {
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox"
                               class="custom-control-input"
                               name="CmdrIcons"
                               id="cb_@ent"
                               checked="@_options.CmdrsChecked[ent]"
                               @bind-value="_options.CmdrsChecked[ent]"
                               @onclick="@(() => IconClick(ent))" />
                        <label class="custom-control-label" for="cb_@ent">
                            <img alt="img_@ent" longdesc="img_@ent" src="@DSdata.GetIcon(@ent)" width="30" height="30" />
                            @ent
                        </label>
                    </div>
                    }
                </div>
            </div>
        </div>
        <div class="@ChartClass">
            <div class="row ml-4">
                <div class="mr-3">
                    @if (Loading)
                    {
                        <button class="btn btn-primary ml-1" disabled>
                            <span class="spinner-border spinner-border-sm"></span>
                            Chart
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary ml-4" disabled>
                            Chart
                        </button>
                    }
                </div>
                @if (_options.Cmdrinfo.ContainsKey(interest))
                {
                    <div class="form-group mr-2">
                        <span class="badge badge-danger mr-2">
                            Total games<br />@_options.Cmdrinfo[interest].Games
                        </span>
                    </div>
                    <div class="form-group mr-2">
                        <span class="badge badge-danger mr-2">
                            Total WR<br />@_options.Cmdrinfo[interest].Winrate
                        </span>
                    </div>
                    <div class="form-group mr-2">
                        <span class="badge badge-danger mr-2">
                            Duration<br />@_options.Cmdrinfo[interest].AverageGameDuration
                        </span>
                    </div>
                    @if (_options.Dataset != "")
                    {
                        var dataset = DSdata.Datasets.SingleOrDefault(s => s.Dataset == _options.Dataset);
                        if (dataset != null)
                        {
                            <div class="form-group mr-2">
                                <span class="badge badge-info mr-2">
                                    Dataset<br />@dataset.Dataset.Substring(0, 5)
                                </span>
                            </div>
                            <div class="form-group mr-2">
                                <span class="badge badge-info mr-2">
                                    Teamgames<br />@(Math.Round((double)dataset.Teamgames * 100 / (double)dataset.Count, 2))%
                                </span>
                            </div>
                        }
                    }
                }
            </div>
                @if (ShowHideCmdr)
                {
                <div class="@CmdrClass" id="chart-wrapper">
                    <sc2dsstats.shared.WebCmdrs />
                </div>
                }
                <div class="@ChartHideClass">
                    <canvas id="canvas"></canvas>
                </div>
        </div>
    </div>
    <div class="@InfoClass">
        <div class="row">
            <div>
                <div style="width: 400px;">
                    <p>@DSdata.INFO[@_options.Mode]</p>
                </div>
            </div>
            <div>
                @if (_options.Cmdrinfo.ContainsKey("ALL"))
                {
                    <div style="width: 400px; font-size: 12px; overflow: hidden; margin-left: 10px;">
                        <p>@_options.Cmdrinfo["ALL"].FilterInfo</p>
                    </div>
                }
            </div>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="@(() => ShowHideCmdr = !ShowHideCmdr)">Cmdrs played</button>
        </div>
    </div>
    <div class="d-xl-none">
        <button type="button" class="btn btn-sm btn-secondary" @onclick="@ShowInfo">Info</button>
    </div>
</div>

@code {
    private bool Loading = true;
    //private string ChartClass = "w-75";
    private string ChartClass = "w-75 chartmobile";
    private string interest = "ALL";
    private List<string> cmdricons;
    private bool ShowHideCmdr = false;
    string CmdrClass => ShowHideCmdr ? null : "collapse";
    string ChartHideClass => ShowHideCmdr ? "collapse" : null;
    string InfoClass = "d-none d-xl-block";

    protected override async Task OnInitializedAsync()
    {
        _options.DefaultFilter();
        _options.Build = "ALL";
        cmdricons = new List<string>();
        _options.PropertyChanged += OptionChanged;
        await _chart.GetChartBase();
        Loading = false;
        _options.Update = !_options.Update;
    }

    void ShowInfo()
    {
        if (String.IsNullOrEmpty(InfoClass))
            InfoClass = "d-none d-xl-block";
        else
            InfoClass = "";
    }

    private void IconClick(string cmdr)
    {
        Loading = true;
        lock (_options)
        {
            _options.DOIT = false;
            InvokeAsync(() => StateHasChanged());

            _options.Icons = _options.CmdrsChecked.Where(x => x.Value == true).ToArray().Count();

            if (String.IsNullOrEmpty(cmdr))
                return;

            _options.Interest = cmdr;
            // false is the new true ..
            if (_options.CmdrsChecked[cmdr] == false)
            {
                cmdricons.Add(cmdr);
                _chart.AddDataset().GetAwaiter();
            }
            else
            {
                cmdricons.Remove(cmdr);
                _chart.RemoveDataset().GetAwaiter();
            }

            _options.Icons = cmdricons.Count();

            string activecmdr = "";
            if (cmdricons.Count > 0)
            {
                activecmdr = cmdricons[cmdricons.Count - 1];
                if (_options.Cmdrinfo.ContainsKey(activecmdr))
                {
                    interest = activecmdr;
                }
                else
                {
                    interest = "ALL";
                }
            }
            else
            {
                interest = "ALL";
            }
            Loading = false;
            _options.DOIT = true;
        }
        InvokeAsync(() => StateHasChanged());
    }

    private async Task IconSingleClick()
    {
        Loading = true;
        await InvokeAsync(() => StateHasChanged());
        _options.DOIT = false;
        string cmdr = _options.Interest;
        foreach (string mycmdr in _options.CmdrsChecked.Where(x => x.Value == true).Select(s => s.Key).ToArray())
        {
            cmdricons.Remove(mycmdr);
            _options.Interest = mycmdr;
            await _chart.RemoveDataset();
            _options.CmdrsChecked[mycmdr] = false;
        }

        if (cmdr == "ALL")
        {
            _options.Interest = "";
            interest = "ALL";
        } else
        {
            _options.CmdrsChecked[cmdr] = true;
            cmdricons.Add(cmdr);
            interest = cmdr;
            _options.Interest = cmdr;
            await _chart.AddDataset();
        }
        Loading = false;
        await InvokeAsync(() => StateHasChanged());
        _options.DOIT = true;
    }

    private async void OptionChanged(object sender, PropertyChangedEventArgs e)
    {
        if (Loading == false)
        {
            if (_options.DOIT == true)
            {
                if (e != null && e.PropertyName != "Interest")
                {
                    Loading = true;
                    await InvokeAsync(() => StateHasChanged());
                    await _chart.RebuildChart();

                    if (!_options.Chart.data.datasets[0].data.Any() && (_options.Mode == "Synergy" || _options.Mode == "AntiSynergy" || _options.Mode == "Timeline"))
                    {
                        _options.Interest = "Abathur";
                        await IconSingleClick();
                    }
                    else
                    {
                        Loading = false;
                        await InvokeAsync(() => StateHasChanged());
                    }
                }
                else if (e != null && e.PropertyName == "Interest")
                    await IconSingleClick();
            }
        }
    }

    public void Dispose()
    {
        _options.PropertyChanged -= OptionChanged;
    }
}
