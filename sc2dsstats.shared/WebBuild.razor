@using System.ComponentModel
@using Microsoft.AspNetCore.Components.Forms
@using sc2dsstats.lib.Data
@using sc2dsstats.lib.Service
@using sc2dsstats.shared.Service
@using sc2dsstats.lib.Db
@inject DSoptions _options
@inject LoadData  _data
@inject DBService _db
@inject DSReplayContext _context
@implements IDisposable

<style>
    .slidecontainer {
        width: 100%; /* Width of the outside container */
    }

    .slider {
        -webkit-appearance: none;
        width: 100%;
        height: 15px;
        border-radius: 5px;
        background: #3641bd;
        outline: none;
        opacity: 0.7;
        -webkit-transition: .2s;
        transition: opacity .2s;
    }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 25px;
            height: 25px;
            border-radius: 50%;
            background: #4CAF50;
            cursor: pointer;
        }

        .slider::-moz-range-thumb {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            background: #4CAF50;
            cursor: pointer;
        }

    .buttonimage:before {
        content: "";
        width: 16px;
        height: 16px;
        display: inline-block;
        margin-right: 5px;
        vertical-align: text-top;
        background-color: transparent;
        background-position: center center;
        background-repeat: no-repeat;
    }

    .cbbutton {
        min-width: 107px !important;
        max-height: 32px !important;
        margin-top: 0px !important;
        margin-bottom: 0px !important;
    }

    .vl {
        border-left: 4px solid red;
    }

</style>

<WebBuildOptions />

<div class="container-fluid">
    <div class="row">
        <div style="max-width: 135px;">
            <div class="d-none d-xl-block">
                <div class="navbar navbar-dark bg-dark">
                    <a class="navbar-brand" data-target="#Winrate">Cmdr</a>
                    <button class="navbar-toggler" @onclick="ToggleNavMenu">
                        <span class="navbar-toggler"></span>
                    </button>
                    <div class="@NavMenuCssClass navbar-collapse" id="navbarTimes">
                        <ul class="navbar-nav">
                            @foreach (string cmdr in DSdata.s_races)
                            {
                                string dataTarget = "#" + cmdr;
                                string isActive = _check.Selected == cmdr ? "active" : "";
                                <li class="nav-item">
                                    <a type="button" class="nav-link @isActive" style="padding: 0.5px;" data-target="@dataTarget" @onclick="@(() => _check.Selected = cmdr)">
                                        <img alt="img_@cmdr" aria-hidden="true" longdesc="img_@cmdr" src="@DSdata.GetIcon(cmdr)" width="30" height="30" />
                                        @cmdr
                                    </a>
                                </li>

                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div style="max-width: 139px;">
            <div class="d-none d-xl-block vl">
                <div class="navbar navbar-dark bg-dark">
                    <a class="navbar-brand" data-target="#Winrate">Vs</a>
                    <button class="navbar-toggler" @onclick="ToggleNavMenu">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="@NavMenuCssClass navbar-collapse" id="navbarTimes">
                        <ul class="navbar-nav">
                            @foreach (string cmdr in DSdata.s_races)
                            {
                                string dataTarget2 = "#" + cmdr;
                                string isActive2 = _checkvs.Selected == cmdr ? "active" : "";
                                <li class="nav-item">
                                    <a type="button" class="nav-link m-0 @isActive2" style="padding: 0.5px;" data-target="@dataTarget2" @onclick="@(() => _checkvs.Selected = cmdr)">
                                        <img alt="imgvs_@cmdr" aria-hidden="true" longdesc="imgvs_@cmdr" src="@DSdata.GetIcon(cmdr)" width="30" height="30" />
                                        @cmdr
                                    </a>
                                </li>

                            }
                            <li class="nav-item">
                                <a type="button" class="nav-link m-0 @(_checkvs.Selected == "ALL" ? "active" : "")" style="padding: 0.5px;" data-target="#Winrate" @onclick="@(() => _checkvs.Selected = "ALL")">
                                    <img alt="imgvs_all" aria-hidden="true" longdesc="imgvs_all" src="_content/sc2dsstats.shared/images/dummy.png" width="30" height="30" />
                                    ALL
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div class="ml-4">
            <div class="row">
                <div class="col-auto">
                    @if (Loading)
                    {
                        <button class="btn btn-primary" disabled>
                            <span class="spinner-border spinner-border-sm"></span>
                            Build
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary ml-4" disabled>
                            Build
                        </button>
                    }
                </div>
                <div class="col-auto">
                    <div class="slidecontainer">
                        <label for="myRange">
                            Gametime
                        </label>
                        <input type="range" min="1" max="4" value="2" class="slider" id="myRange" @onchange="BPSlider">
                    </div>
                </div>
            </div>
            <div class="row mt-3">

                <div class="ml-1">
                    <h3><p class="text-info">@_options.Build's average unit count for <font color="@DSdata.color_max1">@_options.Interest @matchup</font>@comptext</p></h3>
                </div>
            </div>
            <div class="d-xl-none">
                <button class="btn btn-sm btn-primary" @onclick="ShowRepTable">Show/Hide replays</button>
            </div>
            <div class="row">
                <div class="@RepTableClass ml-5, mr-3">
                    <table class="table table-sm table-hover table-dark">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Replays (@skip-@(take + skip)))</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ent in _options.buildResult.RepIDs.OrderByDescending(o => o.Value).Skip(skip).Take(take))
                            {
                                string rowclass = "sort-link";
                                if (ent.Key == replayid)
                                {
                                    rowclass = "table-info";
                                }
                                <tr class="table-row @rowclass" @onclick="@(async => { ShowGame(ent.Key); })">

                                    <th scope="row">@ent.Key</th>
                                    <td>@ent.Value</td>
                                    <td></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="row">
                        <button class="btn btn-sm mr-1" @onclick="@Skip">&lt&lt</button>
                        <button class="btn btn-sm" @onclick="@Take">&gt&gt</button>
                    </div>
                </div>
                <div>
                    <table class="table table-sm table-dark">
                        <thead>
                            <tr><th><h5>Units at <span class="badge badge-info">@_options.Breakpoint</span></h5></th><th><h5>Count</h5></th></tr>
                        </thead>
                        <tr>
                            <td>
                                <h5>
                                    <span class="badge badge-danger">
                                        WR: @_options.buildResult.Winrate% Games: @_options.buildResult.Games
                                    </span>
                                </h5>
                            </td>
                            <td>
                                <h5>
                                    <span class="badge badge-danger">
                                        &empty; @_options.buildResult.Duration.ToString(@"mm\:ss") min
                                    </span>
                                </h5>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <h5>
                                    <span class="badge badge-info">
                                        Upgrades: @_options.buildResult.Upgradespending
                                    </span>
                                </h5>
                            </td>
                            <td>
                                <h5>
                                    <span class="badge badge-info">
                                        Gas: @_options.buildResult.Gascount
                                    </span>
                                </h5>
                            </td>
                        </tr>
                        @if (_options.buildResult.UnitsOrdered != null)
                        {
                            @foreach (var ent in _options.buildResult.UnitsOrdered)
                            {
                                var mycolor = DSdata.color_info;
                                @if ((int)ent.Value >= _options.buildResult.max1)
                                    mycolor = DSdata.color_max1;
                                else if ((int)ent.Value >= _options.buildResult.max2)
                                    mycolor = DSdata.color_max2;
                                else if ((int)ent.Value >= _options.buildResult.max3)
                                    mycolor = DSdata.color_max3;

                                <tr style="font-size: 16px; color: @mycolor;"><td>@Fix.UnitName(ent.Key)</td><td>@ent.Value</td></tr>
                            }
                        }
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public string Build { get; set; } = "ALL";

    int replayid = 0;
    int skip = 0;
    int skip_vs = 0;
    int take = 12;

    private bool Loading = true;
    private bool database = true;
    private string RepTableClass = "d-none d-xl-block";
    private string CompareBuild = "";
    private string matchup = "";
    private string gametimetext = "";
    private string comptext = "";

    private bool collapseNavMenu = false;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private bool collapseNavMenu2 = false;
    private string NavMenuCssClass2 => collapseNavMenu ? "collapse" : null;

    private string BtnStyle = DSdata.CmdrBtnStyle;

    private RadioCheckString _check = new RadioCheckString();
    private RadioCheckString _checkvs = new RadioCheckString();

    private object lockobject = new object();

    private async Task GetBuild()
    {
        Loading = true;
        await InvokeAsync(() => StateHasChanged());
        await BuildService.GetBuild(_options, _context, _db.lockobject);
        Loading = false;
        await InvokeAsync(() => StateHasChanged());
        if (_options.buildResult != null && _options.buildResult.RepIDs.Any())
            await ShowGame(_options.buildResult.RepIDs.First().Key);
    }

    protected override async Task OnInitializedAsync()
    {
        _options.DefaultFilter();
        _options.Startdate = new DateTime(2019, 1, 1);
        _options.Enddate = DateTime.MinValue;
        _options.Build = Build;
        _options.Dataset.Clear();

        if (_options.Build == "player")
            foreach (var ent in _options.Players.Where(x => x.Value == true))
                _options.Dataset.Add(ent.Key);
        else
            _options.Dataset.Add(DSdata.s_builds_hash.Single(x => x.Value == _options.Build).Key);

        _check.Selected = "Abathur";
        _checkvs.Selected = "ALL";

        _options.Mode = "Build";
        _options.Interest = "Abathur";
        _options.Vs = "";
        _options.Breakpoint = "MIN10";
        gametimetext = "at 10min";



        _options.PropertyChanged += Update;
        _check.PropertyChanged += checkClick;
        _checkvs.PropertyChanged += checkVsClick;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetBuild();
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private void ToggleNavMenu2()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    void checkClick(object sender, PropertyChangedEventArgs e)
    {
        _options.Interest = _check.Selected;
        _options.Update = !_options.Update;
    }

    void checkVsClick(object sender, PropertyChangedEventArgs e)
    {
        _options.Vs = _checkvs.Selected;
        _options.Update = !_options.Update;
    }

    void BPSlider(ChangeEventArgs e)
    {
        string bp = (string)e.Value;

        if (bp == "1")
            _options.Breakpoint = "MIN5";
        else if (bp == "2")
            _options.Breakpoint = "MIN10";
        else if (bp == "3")
            _options.Breakpoint = "MIN15";
        else if (bp == "4")
            _options.Breakpoint = "ALL";

        if (_options.Breakpoint == "ALL")
            gametimetext = "at the end of the game";
        else
            gametimetext = "at " + _options.Breakpoint;

        _options.Update = !_options.Update;
    }

    private void Update(object sender, PropertyChangedEventArgs e)
    {
        if (_options.Mode != "Build")
            return;

        lock (lockobject)
        {
            if (Loading)
                return;
            Task.Run(() => GetBuild());
        }

        if (!string.IsNullOrEmpty(_options.Vs))
            matchup = "vs " + _options.Vs;
        else
            matchup = String.Empty;
    }

    async Task ShowGame(int id)
    {
        Loading = true;
        await InvokeAsync(() => StateHasChanged());
        await Task.Run(() => {
            _options.Replay = _db.GetReplay(id);
            replayid = id;
        });
        Loading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    void ShowRepTable()
    {
        if (String.IsNullOrEmpty(RepTableClass))
            RepTableClass = "d-none d-xl-block";
        else
            RepTableClass = "";
    }

    void ShowDatabase()
    {
        database = !database;
    }

    void Skip()
    {
        skip -= 12;
        if (skip < 0 || take < 0)
        {
            skip = 0;
            take = 12;
        }
    }

    void Take()
    {
        skip += 12;
    }

    void Skip_vs()
    {
        skip_vs -= 12;
        if (skip_vs < 0 || take < 0)
        {
            skip = 0;
            take = 12;
        }
    }

    void Take_vs()
    {
        skip_vs += 12;
    }

    private void HandleValidSubmit()
    {

    }

    public void Dispose()
    {
        _options.PropertyChanged -= Update;
        _check.PropertyChanged -= checkClick;
        _checkvs.PropertyChanged -= checkVsClick;
    }

}


