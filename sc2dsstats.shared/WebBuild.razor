@using System.ComponentModel
@using sc2dsstats.lib.Data
@using sc2dsstats.lib.Models
@using sc2dsstats.shared.Service
@using sc2dsstats.lib.Db
@inject DSoptions _options
@implements IDisposable

<style>
    .slidecontainer {
  width: 100%; /* Width of the outside container */
}

.slider {
  -webkit-appearance: none;
  width: 100%;
  height: 15px;
  border-radius: 5px;  
  background: #3641bd;
  outline: none;
  opacity: 0.7;
  -webkit-transition: .2s;
  transition: opacity .2s;
}

.slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 25px;
  height: 25px;
  border-radius: 50%; 
  background: #4CAF50;
  cursor: pointer;
}

.slider::-moz-range-thumb {
  width: 25px;
  height: 25px;
  border-radius: 50%;
  background: #4CAF50;
  cursor: pointer;
}

</style>

    <WebBuildOptions />


    <div class="mt-3">
        <div class="row">
            <div class="d-none d-xl-block">
                @foreach (var ent in DSdata.s_races)
                {
                    <div class="custom-control custom-radio">
                        <input type="radio"
                               class="custom-control-input"
                               name="CmdrIcons"
                               id="cb_@ent"
                               @onchange="eventArgs => { IconClick(ent, eventArgs.Value); }" />
                        <label class="custom-control-label" for="cb_@ent">
                            <img alt="img_@ent" longdesc="img_@ent" src="@DSdata.GetIcon(ent)" width="30" height="30" />
                            @ent
                        </label>
                    </div>
                }
            </div>
            <div class="d-none d-xl-block">
                @foreach (var ent in DSdata.s_races)
                {
                    <div class="custom-control custom-radio">
                        <input type="radio"
                               class="custom-control-input"
                               name="CmdrIconsVs"
                               id="cb_vs_@ent"
                               @onchange="eventArgs => { IconVsClick(ent, eventArgs.Value); }" />
                        <label class="custom-control-label" for="cb_vs_@ent">
                            <img alt="img_@ent" longdesc="img_@ent" src="@DSdata.GetIcon(ent)" width="30" height="30" />
                            @ent
                        </label>
                    </div>
                }
                <div class="custom-control custom-radio">
                    <input type="radio"
                           class="custom-control-input"
                           name="CmdrIconsVs"
                           id="cb_vs_all"
                           @onchange="eventArgs => { IconVsClick(String.Empty, eventArgs.Value); }" />
                    <label class="custom-control-label" for="cb_vs_all">
                        All
                    </label>
                </div>
            </div>
            <div class="ml-5">
                <div class="row">
                    <div class="col-auto">
                        @if (Loading)
                        {
                            <button class="btn btn-primary" disabled>
                                <span class="spinner-border spinner-border-sm"></span>
                                Build
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-primary ml-4" disabled>
                                Build
                            </button>
                        }
                    </div>
                    <div class="col-auto">
                        <div class="slidecontainer">
                            <label for="myRange">
                                Gametime
                            </label>
                            <input type="range" min="1" max="4" value="2" class="slider" id="myRange" @onchange="BPSlider">
                        </div>
                    </div>
                </div>
                <div class="row mt-3">

                    <div class="ml-1">
                        <h3><p class="text-info">@_options.Build's average unit count for <font color="@DSdata.color_max1">@_options.Interest @matchup</font>@comptext</p></h3>
                    </div>
                </div>
                <div class="d-xl-none">
                    <button class="btn btn-sm btn-primary" @onclick="ShowRepTable">Show/Hide replays</button>
                </div>
                <div class="row">
                    <div class="@RepTableClass ml-5, mr-3">
                        <table class="table table-sm table-hover table-dark">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Replays (@skip-@(take + skip)))</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var ent in bresult.RepIDs.OrderByDescending(o => o.Value).Skip(skip).Take(take))
                                {
                                    string rowclass = "sort-link";
                                    if (ent.Key == replayid)
                                    {
                                        rowclass = "table-info";
                                    }
                                    <tr class="table-row @rowclass" @onclick="@(() => ShowGame(ent.Key))">

                                        <th scope="row">@ent.Key</th>
                                        <td>@ent.Value</td>
                                        <td></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="row">
                            <button class="btn btn-sm mr-1" @onclick="@Skip">&lt&lt</button>
                            <button class="btn btn-sm" @onclick="@Take">&gt&gt</button>
                        </div>
                    </div>
                    <div>
                        <table class="table table-sm table-dark">
                            <thead>
                                <tr><th><h5>Units at <span class="badge badge-info">@_options.Breakpoint</span></h5></th><th><h5>Count</h5></th></tr>
                            </thead>
                            <tr>
                                <td>
                                    <h5>
                                        <span class="badge badge-danger">
                                            WR: @bresult.Winrate% Games: @bresult.Games
                                        </span>
                                    </h5>
                                </td>
                                <td>
                                    <h5>
                                        <span class="badge badge-danger">
                                            &empty; @bresult.Duration.ToString(@"mm\:ss") min
                                        </span>
                                    </h5>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <h5>
                                        <span class="badge badge-info">
                                            Upgrades: @bresult.Upgradespending
                                        </span>
                                    </h5>
                                </td>
                                <td>
                                    <h5>
                                        <span class="badge badge-info">
                                            Gas: @bresult.Gascount
                                        </span>
                                    </h5>
                                </td>
                            </tr>
                            @if (Units != null)
                            {
                                @foreach (var ent in Units)
                                {
                                    var mycolor = DSdata.color_info;
                                    @if ((int)ent.Value >= max1)
                                        mycolor = DSdata.color_max1;
                                    else if ((int)ent.Value >= max2)
                                        mycolor = DSdata.color_max2;
                                    else if ((int)ent.Value >= max3)
                                        mycolor = DSdata.color_max3;

                                    <tr style="font-size: 16px; color: @mycolor;"><td>@BuildService.FixUnitName(ent.Key)</td><td>@ent.Value</td></tr>
                                }
                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="@GameClass">
        <WebGame replay="replay" />

    </div>

    <br />
    <br />
    <div id="dv_info" align="left" style="position: inherit; left: 10px; width: 1011px; margin-left: 10px; overflow: hidden">
        <div id="dv_info1" style="width: 400px; float: left">
            <p>@DSdata.INFO["Build"]</p>
        </div>
        <div id="dv_info2" style="width: 600px; font-size: 12px; overflow: hidden; left: 10px; float: left">
            <p></p>
        </div>
    </div>


@code {

    [Parameter]
    public string Build { get; set; } = "ALL";

    DSReplay replay;
    int replayid = 0;
    int skip = 0;
    int skip_vs = 0;
    int take = 12;

    private bool Loading = true;
    private bool database = true;
    private string RepTableClass = "d-none d-xl-block";
    private string CompareBuild = "";
    private string matchup = "";
    private string gametimetext = "";
    private string comptext = "";
    private BuildResult bresult = new BuildResult();
    private IOrderedEnumerable<KeyValuePair<string, float>> Units;
    private int max1 = 100;
    private int max2 = 100;
    private int max3 = 100;
    private string GameClass = "colapsed";

    async Task GetBuild()
    {
        Loading = true;
        await InvokeAsync(() => StateHasChanged());

        foreach (var ent in _options.Gamemodes.Keys.ToArray())
            _options.Gamemodes[ent] = false;

        if (_options.Interest == "Terran" || _options.Interest == "Zerg" || _options.Interest == "Protoss")
        {
            _options.Gamemodes["GameModeStandard"] = true;
        } else
        {
            _options.Gamemodes["GameModeCommanders"] = true;
            _options.Gamemodes["GameModeCommandersHeroic"] = true;
        }

        bresult = await BuildService.GetBuild(_options);
        Units = bresult.Units.OrderByDescending(o => o.Value);
        max1 = 100;
        max2 = 100;
        max3 = 100;
        if (bresult.Units.Count > 2)
        {
            max1 = (int)Units.ElementAt(0).Value;
            max2 = (int)Units.ElementAt(1).Value;
            max3 = (int)Units.ElementAt(2).Value;
        }
        Loading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    protected override async Task OnInitializedAsync()
    {
        _options.DefaultFilter();
        _options.Startdate = new DateTime(2019, 1, 1);
        _options.Enddate = DateTime.MinValue;
        _options.Build = "PAX";
        _options.Dataset = DSdata.s_builds_hash.Single(x => x.Value == _options.Build).Key;
        _options.Mode = "Build";
        _options.Interest = "Abathur";
        _options.Breakpoint = "MIN10";
        gametimetext = "at 10min";
        _options.PropertyChanged += Update;
        GetBuild();
    }

    async Task IconClick(string cmdr, object cbValue)
    {
        _options.Interest = cmdr;
        _options.Update = !_options.Update;
    }

    async Task IconVsClick(string cmdr, object cbValue)
    {
        _options.Vs = cmdr;

        _options.Update = !_options.Update;
    }

    void BPSlider(ChangeEventArgs e)
    {
        string bp = (string)e.Value;

        if (bp == "1")
            _options.Breakpoint = "MIN5";
        else if (bp == "2")
            _options.Breakpoint = "MIN10";
        else if (bp == "3")
            _options.Breakpoint = "MIN15";
        else if (bp == "4")
            _options.Breakpoint = "ALL";

        if (_options.Breakpoint == "ALL")
            gametimetext = "at the end of the game";
        else
            gametimetext = "at " + _options.Breakpoint;

        _options.Update = !_options.Update;
    }

    private async void Update(object sender, PropertyChangedEventArgs e)
    {
        if (_options.Mode != "Build")
            return;
        if (!string.IsNullOrEmpty(_options.Vs))
            matchup = "vs " + _options.Vs;
        else
            matchup = String.Empty;
        GetBuild();
    }

    void ShowGame(int id)
    {
        replayid = id;
        replay = DBService.GetReplay(id);
        GameClass = String.Empty;
    }

    void ShowRepTable()
    {
        if (String.IsNullOrEmpty(RepTableClass))
            RepTableClass = "d-none d-xl-block";
        else
            RepTableClass = "";
    }

    void ShowDatabase()
    {
        database = !database;
    }

    void Skip()
    {
        skip -= 12;
        if (skip < 0 || take < 0)
        {
            skip = 0;
            take = 12;
        }
    }

    void Take()
    {
        skip += 12;
    }

    void Skip_vs()
    {
        skip_vs -= 12;
        if (skip_vs < 0 || take < 0)
        {
            skip = 0;
            take = 12;
        }
    }

    void Take_vs()
    {
        skip_vs += 12;
    }

    public void Dispose()
    {
        _options.PropertyChanged -= Update;
    }

}


