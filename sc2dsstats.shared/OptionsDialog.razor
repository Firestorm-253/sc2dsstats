@using System.Globalization
@using System.ComponentModel
@using sc2dsstats.lib.Data
@inject DSoptions _options

<style>
    .fadein {
        animation-name: fademein;
        animation-duration: 0.5s;
        animation-timing-function: linear;
        animation-fill-mode: forwards;
    }

    .fadeout {
        animation-name: fademeout;
        animation-duration: 0.5s;
        animation-timing-function: linear;
        animation-fill-mode: forwards;
    }

    @@keyframes fademein {
        0% {
            transform: scale(0.25);
            opacity: 0
        }

        50% {
            transform: scale(0.5);
            opacity: 0.5
        }

        100% {
            transform: scale(1.0);
            opacity: 1
        }
    }

    @@keyframes fademeout {
        0% {
            transform: scale(1.0);
            opacity: 1
        }

        50% {
            transform: scale(0.5);
            opacity: 0.5
        }

        100% {
            transform: scale(0);
            opacity: 0
        }
    }

    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        /* Hide default HTML checkbox */
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    /* The slider */
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }
</style>

@if (_Show)
{
    <div class="modal fade show d-block @FadeClass" id="UnitInfo" @onclick="@( async => Show())">
        <div class="modal-dialog">
            <div class="modal-content" @onclick:stopPropagation>
                <div class="modal-header">
                    <h5>Detailed Filter Options</h5>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-sm form-group">
                            <label for="startdate">startdate</label>
                            <input type="date" name="startdate" id="startdate" @bind="@_options.Startdate" @bind:culture="CultureInfo.InvariantCulture" @onclick="@(() => _options.Time=String.Empty)" class="form-control" />
                        </div>
                        <div class="col-sm form-group">
                            <label for="enddate">enddate</label>
                            <input type="date" name="enddate" id="enddate" @bind="@_options.Enddate" @bind:culture="CultureInfo.InvariantCulture" @onclick="@(() => _options.Time=String.Empty)" class="form-control" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm form-group">
                            <label>
                                Duration
                                <!--<input type="number" name="Duration" id="Duration" @bind="@_options.Duration" class="form-control" />-->
                            </label>
                        </div>
                        <div class="col-sm form-group">
                            <label>
                                Army
                                <input type="number" name="Army" id="Army" @bind="@_options.Army" class="form-control" />
                            </label>
                        </div>
                        <div class="col-sm form-group">
                            <label>
                                Income
                                <input type="number" name="Income" id="Income" @bind="@_options.Income" class="form-control" />
                            </label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm form-group">
                            <label>
                                Leaver
                                <input type="number" name="Leaver" id="Leaver" @bind="@_options.Leaver" class="form-control" />
                            </label>
                        </div>
                        <div class="col-sm form-group">
                            <label>
                                Kills
                                <input type="number" name="Killsum" id="Killsum" @bind="@_options.Kills" class="form-control" />
                            </label>
                        </div>
                        <div class="col-sm form-group">
                            <label>
                                Playercount
                                <input type="number" name="Playercount" id="Playercount" @bind="@_options.PlayerCount" class="form-control" />
                            </label>
                        </div>
                    </div>
                    <div class="col-sm form-group">
                        <div class="row">
                            <div class="col-sm">
                                <h5>Gamemodes</h5>
                                @foreach (var ent in DSdata.s_gamemodes)
                                {
                                    <div class="custom-control custom-checkbox mr-2">
                                        <input type="checkbox" class="custom-control-input" name="cb_gamemodes" id="cb_gamemodes_@ent" @bind="@_options.Gamemodes[ent]" />
                                        <label class="custom-control-label" for="cb_gamemodes_@ent">@ent</label>
                                    </div>
                                }
                            </div>
                            <div class="col-sm">
                                <h5>Players</h5>
                                @foreach (var ent in _options.Players.Keys)
                                {
                                    <div class="custom-control custom-checkbox mr-2">
                                        <input type="checkbox" class="custom-control-input" name="cb_players" id="cb_players_@ent" checked="_options.Players[ent]" @onchange="@(() => SetPlayer(ent))" />
                                        <label class="custom-control-label" for="cb_players_@ent">@ent</label>
                                    </div>
                                }
                            </div>
                            <Dropdown TItem="string" OnSelected="@OnDatasetSelected">
                                <InitialTip>Dataset</InitialTip>
                                <ChildContent>
                                    <DropdownListItem Item="@("ALL")">ALL</DropdownListItem>
                                    <div class="dropdown-divider"></div>
                                    @foreach (string dataset in DSdata.Datasets.Where(x => x.Count > 500).OrderBy(o => o.Dataset).Select(s => s.Dataset))
                                    {
                                        <DropdownListItem Item="@dataset">@dataset.Substring(0, 5)</DropdownListItem>
                                    }
                                </ChildContent>
                            </Dropdown>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="btn-group" role="group" aria-label="DialogEndButtons">
                        <button type="button" class="btn btn-secondary" @onclick="@DefaultFilter">Default</button>
                        <button type="button" class="btn btn-secondary" @onclick="@OffFilter">Off</button>
                        <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="@(async => Show())">Filter/Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>

}

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    private Boolean _Show { get; set; } = false;
    private string FadeClass = "fadein";


    private string myhash = "";

    protected override void OnInitialized()
    {
        myhash = _options.Hash;
    }

    public async void Show()
    {
        if (_Show == false)
        {
            myhash = _options.Hash;
            FadeClass = "fadein";
        }
        else
        {
            if (myhash != _options.GenHash())
                _options.Update = !_options.Update;
            FadeClass = "fadeout";
            await Task.Delay(500);
        }
        _Show = !_Show;
        await InvokeAsync(() => StateHasChanged());
        await Task.Delay(500);
        FadeClass = "";
        await InvokeAsync(() => StateHasChanged());

    }

    void DefaultFilter()
    {
        _options.DefaultFilter("Winrate");
        _options.Update = !_options.Update;
        myhash = _options.GenHash();
    }

    void OffFilter()
    {
        _options.Build = String.Empty;
        _options.Duration = 0;
        _options.Leaver = 0;
        _options.Army = 0;
        _options.Kills = 0;
        _options.Income = 0;
        _options.Startdate = DateTime.MinValue;
        _options.Enddate = DateTime.MinValue;
        _options.PlayerCount = 1;
        foreach (var ent in _options.Gamemodes.Keys.ToArray())
        {
            _options.Gamemodes[ent] = true;
        }
        _options.Interest = String.Empty;
        _options.Vs = String.Empty;
        _options.Dataset = new List<string>();
        
        _options.Update = !_options.Update;
        myhash = _options.GenHash();
    }

    void SetPlayer(string name)
    {
        _options.Players[name] = !_options.Players[name];
        _options.Update = !_options.Update;
        myhash = _options.GenHash();
    }

    private void OnDatasetSelected(string selection)
    {
        if (selection == "ALL")
        {
            _options.Dataset = new List<string>();
            _options.Player = false;
        }
        else
        {
            _options.Dataset.Clear();
            _options.Dataset.Add(selection);
            _options.Player = true;
        }
    }

}

