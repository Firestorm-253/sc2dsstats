@using sc2dsstats.lib.Db
@using sc2dsstats.lib.Models
@using sc2dsstats.lib.Data
@inject DSoptions  _options;
@inject NavigationManager _nav

<div class="mr-3">
    @if (Loading)
    {
        <button class="btn btn-primary ml-1" disabled>
            <span class="spinner-border spinner-border-sm"></span>
            Database
        </button>
    }
    else
    {
        <button class="btn btn-primary ml-4" disabled>
            Database
        </button>
    }
</div>

<div>
    <div class="row">
        @foreach (var opt in RepOpt.Opt.Keys)
        {
            <div class="custom-control custom-checkbox ml-1 w-auto">
                <input type="checkbox" class="custom-control-input" name="cb_opt" id="cb_opt_@opt" @bind="@RepOpt.Opt[opt]" />
                <label class="custom-control-label" for="cb_opt_@opt">@opt</label>
            </div>
        }
    </div>
    <div class="row">
        <div class="col-auto">
            <table class="table table-sm table-hover table-dark">
                <thead>
                    <tr>
                        @foreach (var opt in RepOpt.Opt.Keys)
                        {
                            @if (RepOpt.Opt[opt] == true)
                            {
                                <th scope="col"><span class="sort-link" @onclick="@(() => SortReps(opt))">@opt</span></th>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    @if  (Loading == false) {
                        @foreach (var ent in Replays)
                        {
                            string rowclass = "sort-link";
                            @if (RepId == ent.ID)
                            {
                                rowclass = "table-info";
                            }
                            <tr class="table-row @rowclass" @onclick="@(() => ShowGame(@ent.ID))">
                                @foreach (var opt in RepOpt.Opt.Keys)
                                {
                                    if (RepOpt.Opt[opt] == true)
                                    {
                                        <td>@GetRepProperty(ent, opt)</td>
                                    }
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="col-auto">
            <h5>Search</h5>
        </div>
    </div>
</div>
<div class="row">
    <button class="btn btn-sm mr-1" @onclick="@Skip">&lt&lt</button>
    <button class="btn btn-sm" @onclick="@Take">&gt&gt</button>
</div>


<div class="@GameClass" id="RepId">
    <WebGame replay="replay" />

</div>

@code {
    [Parameter]
    public int RepId { get; set; } = 0;

    private DSReplay replay;
    private int skip = 0;
    private string GameClass = "collapse";
    private bool Loading = true;
    private ReplayOptions RepOpt = new ReplayOptions();
    private string lastsortid = "";

    List<DSReplay> Replays = new List<DSReplay>();

    const int take = 12;

    protected override async Task OnInitializedAsync()
    {
        _options.DefaultFilter();
        _options.Mode = "Database";

        using (var context = new DSReplayContext())
        {
            Replays = context.DSReplays.OrderByDescending(o => o.GAMETIME).Take(take).ToList();
        }
        if (RepId > 0)
            ShowGame(RepId, true);
        else
        {
            ShowGame(16752, true);
            /*
            var uri = new Uri(_nav.Uri);
            var fragment = uri.Fragment;
            int id = 0;
            int.TryParse(fragment, out id);
            if (id > 0) {
                RepId = id;
                ShowGame(RepId);
            }
            
            */
        }
        Loading = false;
    }

    public async void SortReps(string id)
    {
        Loading = true;

        using (var context = new DSReplayContext())
        {
            if (id == lastsortid)
            {
                Replays = id switch
                {
                    "ID" => context.DSReplays.OrderByDescending(o => o.ID).Take(take).ToList(),
                    "REPLAY" => context.DSReplays.OrderByDescending(o => o.REPLAY).Take(take).ToList(),
                    "GAMETIME" => context.DSReplays.OrderByDescending(o => o.GAMETIME).Take(take).ToList(),
                    "WINNER" => context.DSReplays.OrderByDescending(o => o.WINNER).Take(take).ToList(),
                    "DURATION" => context.DSReplays.OrderByDescending(o => o.DURATION).Take(take).ToList(),
                    "MAXLEAVER" => context.DSReplays.OrderByDescending(o => o.MAXLEAVER).Take(take).ToList(),
                    "MINKILLSUM" => context.DSReplays.OrderByDescending(o => o.MINKILLSUM).Take(take).ToList(),
                    "MININCOME" => context.DSReplays.OrderByDescending(o => o.MININCOME).Take(take).ToList(),
                    "MINARMY" => context.DSReplays.OrderByDescending(o => o.MINARMY).Take(take).ToList(),
                    "PLAYERCOUNT" => context.DSReplays.OrderByDescending(o => o.PLAYERCOUNT).Take(take).ToList(),
                    "GAMEMODE" => context.DSReplays.OrderByDescending(o => o.GAMEMODE).Take(take).ToList(),
                    _ => context.DSReplays.OrderByDescending(o => o.GAMETIME).Take(take).ToList()
                };
                lastsortid = "";
            } else
            {
                Replays = id switch
                {
                    "ID" => context.DSReplays.OrderBy(o => o.ID).Take(take).ToList(),
                    "REPLAY" => context.DSReplays.OrderBy(o => o.REPLAY).Take(take).ToList(),
                    "GAMETIME" => context.DSReplays.OrderBy(o => o.GAMETIME).Take(take).ToList(),
                    "WINNER" => context.DSReplays.OrderBy(o => o.WINNER).Take(take).ToList(),
                    "DURATION" => context.DSReplays.OrderBy(o => o.DURATION).Take(take).ToList(),
                    "MAXLEAVER" => context.DSReplays.OrderBy(o => o.MAXLEAVER).Take(take).ToList(),
                    "MINKILLSUM" => context.DSReplays.OrderBy(o => o.MINKILLSUM).Take(take).ToList(),
                    "MININCOME" => context.DSReplays.OrderBy(o => o.MININCOME).Take(take).ToList(),
                    "MINARMY" => context.DSReplays.OrderBy(o => o.MINARMY).Take(take).ToList(),
                    "PLAYERCOUNT" => context.DSReplays.OrderBy(o => o.PLAYERCOUNT).Take(take).ToList(),
                    "GAMEMODE" => context.DSReplays.OrderBy(o => o.GAMEMODE).Take(take).ToList(),
                    _ => context.DSReplays.OrderBy(o => o.GAMETIME).Take(take).ToList()
                };
                lastsortid = id;
            }
        }
        skip = 0;
        Loading = false;
    }

    string GetRepProperty(DSReplay rep, string prop)
    {
        return rep.GetType().GetProperty(prop).GetValue(rep, null).ToString();
    }

    void ShowGame(int repid, bool isInit = false)
    {
        GameClass = String.Empty;
        replay = DBService.GetReplay(repid);
        if (replay != null)
        {
            if (isInit == false)
            {
                string cururi = _nav.Uri;
                while (char.IsNumber(cururi.Last()))
                    cururi = cururi.Remove(cururi.Length - 1);
                if (cururi.Last() == '/')
                    cururi = cururi.Remove(cururi.Length - 1);
                _nav.NavigateTo(cururi + "/" + replay.ID);
                RepId = replay.ID;
            }
        }
    }

    void Skip()
    {
        skip -= take;
        if (skip < 0)
            skip = 0;
        Loading = true;
        using (var context = new DSReplayContext())
        {
            Replays = context.DSReplays.OrderBy(o => o.GAMETIME).Skip(skip).Take(take).ToList();
        }
        Loading = false;
    }

    void Take()
    {
        skip += take;
        Loading = true;
        using (var context = new DSReplayContext())
        {
            Replays = context.DSReplays.OrderBy(o => o.GAMETIME).Skip(skip).Take(take).ToList();
        }
        Loading = false;
    }
}