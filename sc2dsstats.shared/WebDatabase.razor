@using sc2dsstats.lib.Db
@using sc2dsstats.lib.Models
@using sc2dsstats.lib.Data
@using sc2dsstats.shared.Service
@inject DSoptions  _options
@inject DBService _db
@inject NavigationManager _nav

<div class="mr-3">
    @if (Loading)
    {
        <button class="btn btn-primary ml-1" disabled>
            <span class="spinner-border spinner-border-sm"></span>
            Database
        </button>
    }
    else
    {
        <button class="btn btn-primary ml-4" disabled>
            Database
        </button>
    }
</div>

<div>
    <div class="row">
        @foreach (var opt in RepOpt.Opt.Keys)
        {
            <div class="custom-control custom-checkbox ml-1 w-auto">
                <input type="checkbox" class="custom-control-input" name="cb_opt" id="cb_opt_@opt" @bind="@RepOpt.Opt[opt]" />
                <label class="custom-control-label" for="cb_opt_@opt">@opt</label>
            </div>
        }
    </div>
    <div class="row">
        <div class="col-auto">
            <table class="table table-sm table-hover table-dark">
                <thead>
                    <tr>
                        @foreach (var opt in RepOpt.Opt.Keys)
                        {
                            @if (RepOpt.Opt[opt] == true)
                            {
                                <th scope="col"><span class="sort-link" @onclick="@(() => SortReps(opt))">@opt</span></th>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    
                    @foreach (var ent in Replays)
                    {
                        string rowclass = "sort-link";
                        @if (RepId == ent.ID)
                        {
                            rowclass = "table-info";
                        }
                <tr class="table-row @rowclass" @onclick="@(async => ShowGame(@ent.ID))">
                    @foreach (var opt in RepOpt.Opt.Where(x => x.Value == true))
                    {
                        if (opt.Key == "DURATION")
                        {
                            <td>@TimeSpan.FromSeconds((int)GetRepProperty(ent, opt.Key)).ToString(@"hh\:mm\:ss")</td>
                        }
                        else if (opt.Key == "GAMETIME")
                        {
                            <td>@(Convert.ToDateTime(GetRepProperty(ent, opt.Key)).ToString("yyyy/MM/dd"))</td>
                        }
                        else
                        {
                            <td>@GetRepProperty(ent, opt.Key).ToString()</td>
                        }
                    }
                </tr>
                    }
                    
                </tbody>
            </table>
        </div>
        <div class="col-auto">
            <h5><button type="button" class="btn btn-secondary" @onclick="DBSearch">Search</button><button type="button" class="btn btn-sm btn-secondary" @onclick="@ResetSearch">Reset</button></h5>
            <DatabaseSearch @ref="dbSearch" dbOptions="dbOptions" />
        </div>
    </div>
</div>
<div class="row">
    <button class="btn btn-sm mr-1" @onclick="@Skip">&lt&lt</button>
    <button class="btn btn-sm" @onclick="@Take">&gt&gt</button>
</div>

@code {
    [Parameter]
    public int RepId { get; set; } = 0;

    private int skip = 0;
    private bool Loading = true;
    private ReplayOptions RepOpt = new ReplayOptions();
    private string sortid = "GAMETIME";
    private string lastsortid = "";
    private bool sortoder = true;
    DatabaseSearchOptions dbOptions = new DatabaseSearchOptions();
    DatabaseSearch dbSearch;

    List<DSReplay> Replays = new List<DSReplay>();
    IQueryable<DSReplay> DBReplays;

    const int take = 12;

    protected override async Task OnInitializedAsync()
    {
        _options.DefaultFilter();
        _options.Mode = "Database";
        _options.Replay = null;

        dbOptions.Cmdrs[1] = "Team1";
        dbOptions.Cmdrs[2] = "Team1";
        dbOptions.Cmdrs[3] = "Team1";
        dbOptions.Cmdrs[4] = "Team2";
        dbOptions.Cmdrs[5] = "Team2";
        dbOptions.Cmdrs[6] = "Team2";
        DBReplays = _db.GetQueriableReplays();
        Replays = DBReplays.OrderByDescending(o => o.GAMETIME).Take(take).ToList();
        Replays = _db.GetReplays(0, take, "GAMETIME");
        if (RepId > 0)
            await ShowGame(RepId, true);
        else
        {
            DSReplay lastrep = _db.GetLatestReplay();
            if (lastrep != null)
            {
                RepId = lastrep.ID;
                await ShowGame(RepId, true);
            }
            /*
            var uri = new Uri(_nav.Uri);
            var fragment = uri.Fragment;
            int id = 0;
            int.TryParse(fragment, out id);
            if (id > 0) {
                RepId = id;
                ShowGame(RepId);
            }

            */
        }



        Loading = false;
    }

    public async void SortReps(string id)
    {
        Loading = true;
        await InvokeAsync(() => StateHasChanged());
        sortid = id;
        if (lastsortid == sortid)
            sortoder = !sortoder;
        skip = 0;
        Replays = _db.GetReplaysPart(DBReplays, sortid, skip, take, sortoder);
        lastsortid = id;
        Loading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    object GetRepProperty(DSReplay rep, string prop)
    {
        return rep.GetType().GetProperty(prop).GetValue(rep, null);
    }

    async Task ShowGame(int repid, bool isInit = false)
    {
        Loading = true;
        await InvokeAsync(() => StateHasChanged());
        await Task.Run(() => {
            _options.Replay = _db.GetReplay(repid);
            if (_options.Replay != null)
            {
                if (isInit == false)
                {
                    string cururi = _nav.Uri;
                    while (char.IsNumber(cururi.Last()))
                        cururi = cururi.Remove(cururi.Length - 1);
                    if (cururi.Last() == '/')
                        cururi = cururi.Remove(cururi.Length - 1);
                    _nav.NavigateTo(cururi + "/" + _options.Replay.ID);
                    RepId = _options.Replay.ID;
                }
            }
        });

        Loading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    async void DBSearch()
    {
        Loading = true;
        DBReplays = _db.CmdrSearch(_db.GetQueriableReplays(), dbOptions);
        skip = 0;
        Replays = _db.GetReplaysPart(DBReplays, sortid, skip, take, sortoder);
        Loading = false;
        if (Replays.Any())
            ShowGame(Replays.First().ID);
    }

    void ResetSearch()
    {
        dbOptions.Cmdrs[1] = "Team1";
        dbOptions.Cmdrs[2] = "Team1";
        dbOptions.Cmdrs[3] = "Team1";
        dbOptions.Cmdrs[4] = "Team2";
        dbOptions.Cmdrs[5] = "Team2";
        dbOptions.Cmdrs[6] = "Team2";

        skip = 0;
        DBReplays = _db.GetQueriableReplays();
        Replays = _db.GetReplaysPart(DBReplays, sortid, skip, take, sortoder);
        dbSearch.Reset();
        if (Replays.Any())
            ShowGame(Replays.First().ID);
    }

    void Skip()
    {
        skip -= take;
        if (skip < 0)
            skip = 0;
        Loading = true;

        Replays = _db.GetReplaysPart(DBReplays, sortid, skip, take, sortoder);
        Loading = false;
    }

    void Take()
    {
        skip += take;
        Loading = true;
        Replays = _db.GetReplaysPart(DBReplays, sortid, skip, take, sortoder);
        Loading = false;
    }
}