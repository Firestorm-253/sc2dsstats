@using System.Globalization
@using sc2dsstats.lib.Data
@using sc2dsstats.shared.Service
@inject DSoptions _options

    <div>
        <div class="d-none d-xl-block">
            <div class="row">
                <button class="btn btn-sm btn-light mr-2" @onclick="OpenDialog">Filter</button>
                @foreach (string mode in DSdata.s_chartmodes)
                {
                    if (_options.Mode == mode)
                    {
                        <span class="btn btn-warning" @onclick="@(() => _options.Mode = mode)">@mode</span>
                    }
                    else
                    {
                        <span class="btn btn-primary" @onclick="@(() => _options.Mode = mode)">@mode</span>
                    }
                }

            <div class="position-relative ml-2" style="min-width: 60px;">
                <div class="position-absolute">
                    <div class="btn-group-vertical btn-group-toggle" data-toggle="buttons">
                        <label class="btn btn-sm btn-outline-info @PlayerClass1">
                            <input type="radio" name="playeroption" autocomplete="off" @onchange="CBPlayerClickOn"> Player
                        </label>
                        <label class="btn btn-sm btn-outline-info @PlayerClass2">
                            <input type="radio" name="playeroption" autocomplete="off" @onchange="CBPlayerClickOff"> Any
                        </label>
                    </div>
                </div>
            </div>
            <div class="position-relative ml-2">
                <div class="position-absolute">
                    <div class="btn-group-vertical btn-group-toggle" data-toggle="buttons">
                        <label class="btn btn-sm btn-outline-info @ZeroClass1">
                            <input type="radio" name="zerooption" autocomplete="off" @onchange="BeginAtZeroClickOn"> BeginAtZero
                        </label>
                        <label class="btn btn-sm btn-outline-info @ZeroClass2">
                            <input type="radio" name="zerooption" autocomplete="off" @onchange="BeginAtZeroClickOff"> AutoScale
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            @for (int i = 0; i < DSdata.s_timespans.Count(); i++)
            {
                var bi = i;
                @if (_options.Time == DSdata.s_timespans[bi])
                {
                    <span class="btn btn-dark" @onclick="@(() => Gametime(bi))">@DSdata.s_timespans[bi]</span>
                }
                else
                {
                    <span class="btn btn-secondary" @onclick="@(() => Gametime(bi))">@DSdata.s_timespans[bi]</span>
                }
            }
        </div>
    </div>
</div>
    <div class="d-xl-none">
        <div class="row">
            <Dropdown TItem="string" OnSelected="@OnModeSelected">
                <InitialTip>Winrate</InitialTip>
                <ChildContent>
                    @foreach (string mode in DSdata.s_chartmodes)
                    {
                        <DropdownListItem Item="@mode">@mode</DropdownListItem>
                    }
                </ChildContent>
            </Dropdown>
            <Dropdown TItem="string" OnSelected="@OnCmdrSelected">
                <InitialTip>Cmdr</InitialTip>
                <ChildContent>
                    <DropdownListItem Item="@("ALL")">ALL</DropdownListItem>
                    <div class="dropdown-divider"></div>
                    @foreach (string cmdr in DSdata.s_races)
                    {
                        <DropdownListItem Item="@cmdr">@cmdr</DropdownListItem>
                    }
                </ChildContent>
            </Dropdown>
            <Dropdown TItem="string" OnSelected="@OnTimeSelected">
                <InitialTip>Timespan</InitialTip>
                <ChildContent>
                    @foreach (string time in DSdata.s_timespans)
                    {
                        <DropdownListItem Item="@time">@time</DropdownListItem>
                    }
                </ChildContent>
            </Dropdown>

            <div class="btn-group-vertical btn-group-toggle" data-toggle="buttons">
                <label class="btn btn-sm btn-outline-info @PlayerClass1">
                    <input type="radio" name="playeroption" autocomplete="off" @onchange="CBPlayerClickOn"> Player
                </label>
                <label class="btn btn-sm btn-outline-info @PlayerClass2">
                    <input type="radio" name="playeroption" autocomplete="off" @onchange="CBPlayerClickOff"> Any
                </label>
            </div>
            <div class="btn-group-vertical btn-group-toggle" data-toggle="buttons">
                <label class="btn btn-sm btn-outline-info @ZeroClass1">
                    <input type="radio" name="zerooption" autocomplete="off" @onchange="BeginAtZeroClickOn"> BeginAtZero
                </label>
                <label class="btn btn-sm btn-outline-info @ZeroClass2">
                    <input type="radio" name="zerooption" autocomplete="off" @onchange="BeginAtZeroClickOff"> AutoScale
                </label>
            </div>
        </div>
    </div>
        

<OptionsDialog @ref="myDialog" />

@code {

    OptionsDialog myDialog;

    private string isActive = "";
    private string myTimespan = "";
    private object lockobject = new object();

    private string PlayerClass1 => _options.Player ? "active" : "";
    private string PlayerClass2 => _options.Player ? "" : "active";

    private string ZeroClass1 => _options.BeginAtZero ? "active" : "";
    private string ZeroClass2 => _options.BeginAtZero ? "" : "active";

    void OpenDialog()
    {
        myDialog.Show();
    }

    private void CBPlayerClickOn(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "on")
            _options.Player = true;
        else
            return;
        CBPlayerClick();
    }

    private void CBPlayerClickOff(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "on")
            _options.Player = false;
        else
            return;
        CBPlayerClick();
    }

    private void CBPlayerClick()
    {
        if (DSdata.Config.Players.Any())
        {
            if (_options.Player)
                foreach (var ent in _options.Players.Where(x => x.Value == true))
                    _options.Dataset.Add(ent.Key);
            else
                _options.Dataset.Clear();

        }
        _options.Update = !_options.Update;
    }

    private void BeginAtZeroClickOn(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "on")
            _options.BeginAtZero = true;
        else
            return;
        BeginAtZeroClick();
    }

    private void BeginAtZeroClickOff(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "on")
            _options.BeginAtZero = false;
        else
            return;
        BeginAtZeroClick();
    }

    private void BeginAtZeroClick()
    {
        ChartService.ChangeOption(_options);
        InvokeAsync(() => StateHasChanged());
    }

    private void Gametime(int i)
    {
        // this month
        if (i == 0)
        {
            _options.Startdate = DateTime.Today.AddDays(-(DateTime.Today.Day - 1));
            _options.Enddate = DateTime.MinValue;
        }

        // last month
        else if (i == 1)
        {
            _options.Startdate = DateTime.Today.AddDays(-(DateTime.Today.Day - 1)).AddMonths(-1);
            _options.Enddate = DateTime.Today.AddDays(-(DateTime.Today.Day - 1)).AddDays(-1);
        }

        // this year
        else if (i == 2)
        {
            _options.Startdate = new DateTime(DateTime.Now.Year, 1, 1);
            _options.Enddate = DateTime.MinValue;
        }
        // last year
        else if (i == 3)
        {
            _options.Startdate = new DateTime(DateTime.Now.Year - 1, 1, 1);
            _options.Enddate = new DateTime(DateTime.Now.Year, 1, 1);
        }
        // all
        else if (i == 4)
        {
            _options.Startdate = DateTime.MinValue;
            _options.Enddate = DateTime.MinValue;
        }
        _options.Time = DSdata.s_timespans[i];
        _options.Update = !_options.Update;

    }

    private void OnCmdrSelected(string selection)
    {
        if (selection == "ALL")
        {
            _options.Interest = String.Empty;
            //ChartService.GetChartBase(_options);
            _options.Update = !_options.Update;
        }
        else
        {
            string removeme = _options.Interest;
            if (String.IsNullOrEmpty(removeme))
                removeme = "global";

            ChartService.RemoveDataset(_options, removeme, lockobject);
            _options.Interest = selection;
            ChartService.AddDataset(_options, lockobject);
        }

    }

    private void OnModeSelected(string selection)
    {
        _options.Mode = selection;
    }

    private void OnTimeSelected(string selection)
    {
        myTimespan = selection;
        Gametime(Array.FindIndex(DSdata.s_timespans, w => w == selection) + 1);
    }
}