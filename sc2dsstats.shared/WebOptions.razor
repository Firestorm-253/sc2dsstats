@using System.Globalization
@using sc2dsstats.lib.Data
@using sc2dsstats.shared.Service
@inject DSoptions _options

    <div>
        <div class="btn-group">
            <div class="d-none d-xl-block mr-2">
                <button type="button" class="btn btn-sm btn-light btn-block" @onclick="OpenDialog">Filter</button>
            </div>
            <div class="d-none d-xl-block">
                <div class="btn-group btn-group-toggle" data-toggle="buttons">
                    <label class="btn btn-primary active" @onclick="@(() => _options.Mode = "Winrate")">
                        <input type="radio" name="options" id="option1" autocomplete="off" checked=""> Winrate
                    </label>
                    <label class="btn btn-primary" @onclick="@(() => _options.Mode = "MVP")">
                        <input type="radio" name="options" id="option2" autocomplete="off"> MVP
                    </label>
                    <label class="btn btn-primary" @onclick="@(() => _options.Mode = "DPS")">
                        <input type="radio" name="options" id="option3" autocomplete="off"> DPS
                    </label>
                    <label class="btn btn-primary" @onclick="@(() => _options.Mode = "Synergy")">
                        <input type="radio" name="options" id="option4" autocomplete="off"> Synergy
                    </label>
                    <label class="btn btn-primary" @onclick="@(() => _options.Mode = "AntiSynergy")">
                        <input type="radio" name="options" id="option5" autocomplete="off"> AntiSynergy
                    </label>
                    <label class="btn btn-primary" @onclick="@(() => _options.Mode = "Timeline")">
                        <input type="radio" name="options" id="option6" autocomplete="off"> Timeline
                    </label>
                </div>
            </div>
            <div class="custom-control custom-checkbox">
                <input type="checkbox"
                       class="custom-control-input"
                       name="Player"
                       id="PlayerCb"
                       checked="@_options.Player"
                       @onchange="eventArgs => { CBPlayerClick(eventArgs.Value); }" />
                <label class="custom-control-label" for="PlayerCb">
                    Player
                </label>
                <div class="collapse">@_options.Player</div>
            </div>
            <div class="custom-control custom-checkbox ml-1">
                <input type="checkbox"
                       class="custom-control-input"
                       name="BeginAtZero"
                       id="BeginAtZeroCb"
                       checked="@_options.BeginAtZero"
                       @onchange="eventArgs => { BeginAtZeroClick(eventArgs.Value); }" />
                <label class="custom-control-label" for="BeginAtZeroCb">
                    BeginAtZero
                </label>
                <div class="collapse">@_options.BeginAtZero</div>
            </div>
        </div>
        <div class="d-none d-xl-block">
            <div class="btn-group btn-group-toggle" data-toggle="buttons">
                <label class="btn btn-secondary" @onclick="@(() => Gametime(1))">
                    <input type="radio" name="timeoptions" id="timeoptions1" autocomplete="off" checked=""> This month
                </label>
                <label class="btn btn-secondary" @onclick="@(() => Gametime(2))">
                    <input type="radio" name="timeoptions" id="timeoptions2" autocomplete="off"> Last month
                </label>
                <label class="btn btn-secondary active" @onclick="@(() => Gametime(3))">
                    <input type="radio" name="timeoptions" id="timeoptions3" autocomplete="off"> This year
                </label>
                <label class="btn btn-secondary" @onclick="@(() => Gametime(4))">
                    <input type="radio" name="timeoptions" id="timeoptions4" autocomplete="off"> Last year
                </label>
                <label class="btn btn-secondary" @onclick="@(() => Gametime(5))">
                    <input type="radio" name="timeoptions" id="timeoptions5" autocomplete="off"> All
                </label>
            </div>

        </div>

        <div class="d-xl-none">
            <div class="row">
                <Dropdown TItem="string" OnSelected="@OnModeSelected">
                    <InitialTip>Winrate</InitialTip>
                    <ChildContent>
                        @foreach (string mode in DSdata.s_chartmodes)
                        {
                            <DropdownListItem Item="@mode">@mode</DropdownListItem>
                        }
                    </ChildContent>
                </Dropdown>
                <Dropdown TItem="string" OnSelected="@OnCmdrSelected">
                    <InitialTip>Cmdr</InitialTip>
                    <ChildContent>
                        <DropdownListItem Item="@("ALL")">ALL</DropdownListItem>
                        <div class="dropdown-divider"></div>
                        @foreach (string cmdr in DSdata.s_races)
                        {
                            <DropdownListItem Item="@cmdr">@cmdr</DropdownListItem>
                        }
                    </ChildContent>
                </Dropdown>
                <Dropdown TItem="string" OnSelected="@OnTimeSelected">
                    <InitialTip>Timespan</InitialTip>
                    <ChildContent>
                        @foreach (string time in DSdata.s_timespans)
                        {
                            <DropdownListItem Item="@time">@time</DropdownListItem>
                        }
                    </ChildContent>
                </Dropdown>

                <div class="custom-control custom-checkbox">
                    <input type="checkbox"
                            class="custom-control-input"
                            name="Player1"
                            id="PlayerCb1"
                            checked="@_options.Player"
                            @onchange="eventArgs => { CBPlayerClick(eventArgs.Value); }" />
                    <label class="custom-control-label" for="PlayerCb1">
                        Player
                    </label>

                </div>
                <div class="custom-control custom-checkbox ml-1">
                    <input type="checkbox"
                            class="custom-control-input"
                            name="BeginAtZero1"
                            id="BeginAtZeroCb1"
                            checked="@_options.BeginAtZero"
                            @onchange="eventArgs => { BeginAtZeroClick(eventArgs.Value); }" />
                    <label class="custom-control-label" for="BeginAtZeroCb1">
                        BeginAtZero
                    </label>
                </div>
            </div>
        </div>
    </div>

<OptionsDialog @ref="myDialog" />

@code {

        OptionsDialog myDialog;

    private string isActive = "";
    private string myTimespan = "";
    private object lockobject = new object();


    void OpenDialog()
    {
        myDialog.Show();
    }

    private void CBPlayerClick(object e)
    {
        _options.Player = (bool)e;
        _options.Update = !_options.Update;
    }

    private void BeginAtZeroClick(object e)
    {
        _options.BeginAtZero = (bool)e;
        ChartService.ChangeOption(_options);
        InvokeAsync(() => StateHasChanged());
    }

    private void Gametime(int i)
    {
        // this month
        if (i == 1)
        {
            _options.Startdate = DateTime.Today.AddDays(-(DateTime.Today.Day - 1));
            _options.Enddate = DateTime.MinValue;
        }

        // last month
        else if (i == 2)
        {
            _options.Startdate = DateTime.Today.AddDays(-(DateTime.Today.Day - 1)).AddMonths(-1);
            _options.Enddate = DateTime.Today.AddDays(-(DateTime.Today.Day - 1)).AddDays(-1);
        }

        // this year
        else if (i == 3)
        {
            _options.Startdate = new DateTime(DateTime.Now.Year, 1, 1);
            _options.Enddate = DateTime.MinValue;
        }
        // last year
        else if (i == 4)
        {
            _options.Startdate = new DateTime(DateTime.Now.Year - 1, 1, 1);
            _options.Enddate = new DateTime(DateTime.Now.Year, 1, 1);
        }
        // all
        else if (i == 5)
        {
            _options.Startdate = DateTime.MinValue;
            _options.Enddate = DateTime.MinValue;
        }

        _options.Update = !_options.Update;

    }

    private void OnCmdrSelected(string selection)
    {
        if (selection == "ALL")
        {
            _options.Interest = String.Empty;
            ChartService.GetChartBase(_options);
        }
        else
        {
            string removeme = _options.Interest;
            if (String.IsNullOrEmpty(removeme))
                removeme = "global";

            ChartService.RemoveDataset(_options, removeme, lockobject);
            _options.Interest = selection;
            ChartService.AddDataset(_options, lockobject);
        }

    }

    private void OnModeSelected(string selection)
    {
        _options.Mode = selection;
    }

    private void OnTimeSelected(string selection)
    {
        myTimespan = selection;
        Gametime(Array.FindIndex(DSdata.s_timespans, w => w == selection) + 1);
    }
}