@using System.Globalization
@using Microsoft.AspNetCore.Components.Forms
@using sc2dsstats.lib.Data
@using sc2dsstats.shared.Service
@using System.ComponentModel
@using sc2dsstats.shared;
@inject ChartService _chart
@inject DSoptions _options
@implements IDisposable

<style>
    /* The switch - the box around the slider */
    .switch {
        position: relative;
        display: inline-block;
        width: 45px !important;
        height: 20px !important;
    }

        /* Hide default HTML checkbox */
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    /* The slider */
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 15px !important;
            width: 15px !important;
            left: 2px !important;
            bottom: 2px !important;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(13px);
        -ms-transform: translateX(13px);
        transform: translateX(13px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 17px !important;
    }

        .slider.round:before {
            border-radius: 50%;
        }
</style>


    <div class="row">
        <Dropdown TItem="string" OnSelected="@OnModeSelected">
            <InitialTip>Winrate</InitialTip>
            <ChildContent>
                @foreach (string mode in DSdata.s_chartmodes)
                {
                    <DropdownListItem Item="@mode">@mode</DropdownListItem>
                }
            </ChildContent>
        </Dropdown>
        <Dropdown TItem="string" OnSelected="@OnCmdrSelected">
            <InitialTip>Cmdr</InitialTip>
            <ChildContent>
                <DropdownListItem Item="@("ALL")">ALL</DropdownListItem>
                <div class="dropdown-divider"></div>
                @foreach (string cmdr in DSdata.s_races)
                {
                    <DropdownListItem Item="@cmdr">@cmdr</DropdownListItem>
                }
            </ChildContent>
        </Dropdown>
        <Dropdown TItem="string" OnSelected="@OnTimeSelected">
            <InitialTip>Timespan</InitialTip>
            <ChildContent>
                @foreach (string time in DSdata.s_timespans)
                {
                    <DropdownListItem Item="@time">@time</DropdownListItem>
                }
            </ChildContent>
        </Dropdown>

        <EditForm Model="@_options" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row">
                <div class="form-group col-xs-4 col-md-4">
                    <label for="cbplayer">
                        Player
                    </label>
                    <label id="cbplayer" class="switch">
                        <InputCheckbox @bind-Value="_options.Player" />
                        <span class="slider round"></span>
                    </label>
                </div>
                <div class="form-group col-xs-4 col-md-4">
                    <label for="cbzero">
                        BeginAtZero
                    </label>
                    <label id="cbzero" class="switch">
                        <InputCheckbox @bind-Value="_options.BeginAtZero" />
                        <span class="slider round"></span>
                    </label>
                </div>
            </div>
        </EditForm>
    </div>



<OptionsDialog @ref="myDialog" />

@code {

    OptionsDialog myDialog;

    private string isActive = "";
    private string myTimespan = "";
    private object lockobject = new object();

    protected override void OnInitialized()
    {
        _options.PropertyChanged += Update;
    }

    void Update(object sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    void OpenDialog()
    {
        myDialog.Show();
    }

    private void Gametime(int i)
    {
        // this month
        if (i == 0)
        {
            _options.Startdate = DateTime.Today.AddDays(-(DateTime.Today.Day - 1));
            _options.Enddate = DateTime.MinValue;
        }

        // last month
        else if (i == 1)
        {
            _options.Startdate = DateTime.Today.AddDays(-(DateTime.Today.Day - 1)).AddMonths(-1);
            _options.Enddate = DateTime.Today.AddDays(-(DateTime.Today.Day - 1)).AddDays(-1);
        }

        // this year
        else if (i == 2)
        {
            _options.Startdate = new DateTime(DateTime.Now.Year, 1, 1);
            _options.Enddate = DateTime.MinValue;
        }
        // last year
        else if (i == 3)
        {
            _options.Startdate = new DateTime(DateTime.Now.Year - 1, 1, 1);
            _options.Enddate = new DateTime(DateTime.Now.Year, 1, 1);
        }
        // all
        else if (i == 4)
        {
            _options.Startdate = DateTime.MinValue;
            _options.Enddate = DateTime.MinValue;
        }
        _options.Time = DSdata.s_timespans[i];
        _options.Update = !_options.Update;

    }

    private void OnCmdrSelected(string selection)
    {
        if (selection == "ALL")
        {
            _options.Interest = String.Empty;
            //ChartService.GetChartBase(_options);
            _options.Update = !_options.Update;
        }
        else
        {
            string removeme = _options.Interest;
            if (String.IsNullOrEmpty(removeme))
                removeme = "global";

            _chart.RemoveDataset(_options, removeme, lockobject);
            _options.Interest = selection;
            _chart.AddDataset(_options, lockobject);
        }

    }

    private void OnModeSelected(string selection)
    {
        _options.Mode = selection;
    }

    private void OnTimeSelected(string selection)
    {
        myTimespan = selection;
        Gametime(Array.FindIndex(DSdata.s_timespans, w => w == selection) + 1);
    }

    private void HandleValidSubmit()
    {
        //Console.WriteLine("valid");
    }

    public void Dispose()
    {
        _options.PropertyChanged -= Update;
    }
}