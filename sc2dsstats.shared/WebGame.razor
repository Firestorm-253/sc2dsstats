@using System.Linq
@using sc2dsstats.lib.Data
@using sc2dsstats.lib.Models
@using sc2dsstats.lib.Db
@using sc2dsstats.shared.Service
@using System.IO
@inject DSoptions _options
@inject NavigationManager _nav

<style>
    .slidecontainer {
        width: 100%; /* Width of the outside container */
    }

    .slider {
        -webkit-appearance: none;
        width: 100%;
        height: 15px;
        border-radius: 5px;
        background: #3641bd;
        outline: none;
        opacity: 0.7;
        -webkit-transition: .2s;
        transition: opacity .2s;
    }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 25px;
            height: 25px;
            border-radius: 50%;
            background: #4CAF50;
            cursor: pointer;
        }

        .slider::-moz-range-thumb {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            background: #4CAF50;
            cursor: pointer;
        }
</style>

@if (replay != null)
{
    @if (replay.ID != replayid)
    {
        @NewReplay()
    }
    <div id="copyme" class="container-fluid">
        <div class="row">
            <div class="ml-4">
                <div class="row">
                    <h4><span class="badge badge-secondary mr-2">ID @replay.ID</span></h4>
                    <h4><span class="badge badge-secondary mr-2">Duration @(TimeSpan.FromSeconds(replay.DURATION).ToString(@"hh\:mm\:ss")) min</span></h4>
                    <h4><span class="badge badge-secondary mr-2">Gametime @replay.GAMETIME.ToString("yyyy/MM/dd")</span></h4>
                    @if (plpos > 0)
                    {
                        <h4><span class="badge badge-secondary mr-2">Player POS @plpos</span></h4>
                    }
                    <h4><span class="badge badge-secondary">MVP Player @replay.DSPlayer.Where(x => x.KILLSUM == replay.MAXKILLSUM).First().REALPOS</span></h4>
                </div>
                <div class="row">
                    @for (int i = 0; i < 2; i++)
                    {
                        <div class="ml-1">
                            @if (replay.WINNER == i)
                            {
                                TeamClass = "badge-success";
                                <h4><span class="badge @TeamClass">Team @(i + 1) - Winner</span></h4>
                            }
                            else
                            {
                                TeamClass = "badge-danger";
                                <h4><span class="badge @TeamClass">Team @(i + 1)</span></h4>
                            }
                            <table class="table table-sm table-dark table-hover">
                                <thead>
                                    <tr>
                                        <th colspan="2"><h5><span class="badge badge-light">Mid @Mid[i].ToString("00.00")%</span></h5></th>

                                        <th>Build</th>
                                        <th>Cmdr</th>
                                        <th>Army</th>
                                        <th>Kills</th>
                                        <th>Cash</th>
                                        <th>DPV</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (DSPlayer pl in replay.DSPlayer.Where(x => x.TEAM == i).OrderBy(o => o.REALPOS))
                                    {
                                        @if (pl.NAME.Length == 64 || _options.Players.Where(x => x.Value == true && pl.NAME == x.Key).Any())
                                        {
                                            PlayerClass = "table-primary";
                                        }
                                        else if (pl.KILLSUM == replay.MAXKILLSUM)
                                        {
                                            PlayerClass = "table-success";
                                        }
                                        else if (pl.PDURATION < replay.DURATION - 90)
                                        {
                                            PlayerClass = "table-danger";
                                        }
                                        else
                                        {
                                            PlayerClass = "table-dark";
                                        }
                                        <tr class="@PlayerClass table-row" @onclick="@(() => BuildCheck[pl.REALPOS] = !BuildCheck[pl.REALPOS])">
                                            <td>@pl.REALPOS</td>
                                            <td width="30px"><img alt="img_@pl.RACE" longdesc="img_@pl.RACE" src="@DSdata.GetIcon(@pl.RACE)" width="30" height="30" /></td>
                                            <td><input id="build_@pl.RACE\_@pl.REALPOS" name="build_@pl.RACE" type="checkbox" checked="@BuildCheck[pl.REALPOS]" /></td>
                                            <td>@pl.RACE</td>
                                            <td>@(Math.Round((double)pl.ARMY / 1000, 2))k</td>
                                            <td>@(Math.Round((double)pl.KILLSUM / 1000, 2))k</td>
                                            <td>@(Math.Round((double)pl.INCOME / 1000, 2))k</td>
                                            <td>@Math.Round((double)pl.KILLSUM / (double)pl.ARMY, 2)</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
                <div class="row w-auto">
                    <div class="col-auto">
                        <div class="slidecontainer">
                            <input type="range" min="1" max="4" value="@bpvalue" class="slider" id="myBRange" @onchange="BPSlider">
                        </div>
                    </div>
                    <div class="col-auto">
                        <h5 class="text-info">Gametime: @Breakpoint.ToLower()</h5>
                    </div>
                    <div class="col-auto">
                        <a href="@link.Key">@link.Value</a>
                    </div>
                </div>
                    <div class="container-fluid" style="min-height: 594px !important;">
                        <div class="row">
                            @for (int i = 0; i < BuildCheck.Count(); i++)
                            {
                                if (BuildCheck[i] == true)
                                {
                                    DSPlayer pl = replay.DSPlayer.Where(x => x.REALPOS == i).FirstOrDefault();
                                    if (pl != null)
                                    {
                                        if (pl.TEAM == replay.WINNER)
                                        {
                                            BuildPlayerClass = "badge-success";
                                        }
                                        else
                                        {
                                            BuildPlayerClass = "badge-danger";
                                        }
                                        <div>
                                            <h4><span class="badge @BuildPlayerClass">Build Player @i</span></h4>
                                            @if (pl.DSUnit.FirstOrDefault(x => x.BP == Breakpoint && x.Name == "Gas") != null && pl.DSUnit.FirstOrDefault(x => x.BP == Breakpoint && x.Name == "Upgrades") != null)
                                            {
                                                <div class="row ml-2">
                                                    <span class="badge badge-light">Gas @pl.DSUnit.FirstOrDefault(x => x.BP == Breakpoint && x.Name == "Gas").Count</span>
                                                    <span class="badge badge-light">Upgrades @pl.DSUnit.FirstOrDefault(x => x.BP == Breakpoint && x.Name == "Upgrades").Count</span>
                                                </div>
                                            }
                                            <table class="table table-sm table-dark">
                                                <thead>
                                                    <tr>
                                                        <th>Unit</th>
                                                        <th>Count</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var unit in pl.DSUnit.Where(x => x.BP == Breakpoint).OrderByDescending(o => o.Count))
                                                    {
                                                        if (unit.Name == "Gas" || unit.Name == "Mid" || unit.Name == "Upgrades")
                                                            continue;
                                                        <tr>
                                                            <td>@BuildService.FixUnitName(unit.Name)</td>
                                                            <td>@unit.Count</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                }
                            }
                        </div>

                    </div>
                </div>
        </div>
    </div>
    
}

@code {
    [Parameter]
    public DSReplay replay { get; set; }

    string TeamClass = "badge-primary";
    string PlayerClass = "table-primary";
    string BuildPlayerClass = "badge-primary";
    List<bool> BuildCheck;
    string Breakpoint = "MIN10";
    string pldiffcolor = DSdata.color_plbg_def;
    int replayid = 0;
    bool showDetails = false;
    bool showMap = false;
    List<double> Mid = new List<double>() { 0, 0 };
    KeyValuePair<string, string> link = new KeyValuePair<string, string>("", "");
    int plpos = 0;
    int bpvalue = 2;

    Dictionary<string, double> BreakpointMid = new Dictionary<string, double>(DSdata.BreakpointMid);

    protected override void OnInitialized()
    {
        BuildCheck = new List<bool>();
        for (int i = 0; i <= 7; i++)
        {
            BuildCheck.Add(false);
        }

        if (replay != null)
        {
            BreakpointMid["ALL"] = replay.DURATION * 22.4;
        }

    }

    object NewReplay()
    {
        replayid = replay.ID;
        showDetails = false;
        showMap = false;
        if (replay != null)
        {
            BreakpointMid["ALL"] = replay.DURATION * 22.4;
            SetMid();
            string linklink = "";
            string linktext = "";

            if (String.IsNullOrEmpty(replay.REPLAYPATH))
            {
                linklink = _nav.BaseUri;
                linklink += "db/" + replay.ID;
                linktext = linklink;
            } else
            {
                if (File.Exists(replay.REPLAYPATH)) {
                    linklink = @"file:///" + replay.REPLAYPATH;
                    linktext = Path.GetFileName(replay.REPLAYPATH);
                }
            }
            link = new KeyValuePair<string, string>(linklink, linktext);
        }

        DSPlayer pl = null;
        if (DSdata.Config.Players.Any())
        {
            List<string> activePlayers = _options.Players.Where(x => x.Value == true).Select(s => s.Key).ToList();
            pl = replay.DSPlayer.Where(x => activePlayers.Contains(x.NAME)).FirstOrDefault();
        }
        else
            pl = replay.DSPlayer.Where(x => x.NAME.Length == 64).FirstOrDefault();
        plpos = 0;
        int opppos = 0;
        if (pl != null)
        {
            plpos = pl.REALPOS;
            DSPlayer opp = replay.DSPlayer.FirstOrDefault(x => x.REALPOS == DBFunctions.GetOpp(pl.REALPOS));
            if (opp != null)
            {
                opppos = opp.REALPOS;
            }
        }
        for (int i = 0; i < BuildCheck.Count(); i++)
        {
            BuildCheck[i] = false;
            if (i == plpos || i == opppos)
            {
                BuildCheck[i] = true;
            }
        }
        return null;
    }

    void SetMid()
    {

        double bpmbp = BreakpointMid[Breakpoint];
        if (bpmbp > BreakpointMid["ALL"])
            bpmbp = BreakpointMid["ALL"];


        DSPlayer mpl1 = replay.DSPlayer.FirstOrDefault(f => f.TEAM == 0);
        if (mpl1 != null) {
            DSUnit munit1 = mpl1.DSUnit.FirstOrDefault(x => x.BP == Breakpoint && x.Name == "Mid");
            if (munit1 != null)
                Mid[0] = Math.Round(munit1.Count * 100 / bpmbp, 2);
        }
        DSPlayer mpl2 = replay.DSPlayer.FirstOrDefault(f => f.TEAM == 1);
        if (mpl2 != null)
        {
            DSUnit munit2 = mpl2.DSUnit.FirstOrDefault(x => x.BP == Breakpoint && x.Name == "Mid");
            if (munit2 != null)
                Mid[1] = Math.Round(munit2.Count * 100 / bpmbp, 2);
        }
    }

    void BreakpointClick(string bp, object e)
    {
        if ((string)e == "on")
        {
            Breakpoint = bp;
            SetMid();
            StateHasChanged();
        }
    }

    void BPSlider(ChangeEventArgs e)
    {
        string bp = (string)e.Value;

        if (bp == "1")
            Breakpoint = "MIN5";
        else if (bp == "2")
            Breakpoint = "MIN10";
        else if (bp == "3")
            Breakpoint = "MIN15";
        else if (bp == "4")
            Breakpoint = "ALL";

        SetMid();
        StateHasChanged();
    }

    EventCallback ShowBuild(int pos)
    {
        EventCallback e = new EventCallback();
        BuildCheck[pos] = true;

        return e;
    }

    async void CreateCanvas()
    {
        //await JSRuntime.InvokeVoidAsync("CopyMe");
    }

}