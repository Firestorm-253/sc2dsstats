@typeparam TItem
<div id="@id" class="dropdown">
    <button class="btn btn-primary dropdown-toggle @isDisabled mr-2" data-toggle="dropdown" type="button" @onclick="e => this.show=!this.show "
            aria-haspopup="true" aria-expanded="false">
        @Tip
    </button>
    <CascadingValue name="Dropdown" Value="@this">
        <div class="dropdown-menu @isDisabled overflow-auto @(show? "show":"")" style="max-height: 300px !important">
            @ChildContent
        </div>
    </CascadingValue>
</div>

@code {
    [Parameter]
    public RenderFragment InitialTip { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public EventCallback<TItem> OnSelected { get; set; }
    [Parameter]
    public string isDisabled { get; set; } = "";
    [Parameter]
    public string id { get; set; }

    private bool show = false;
    private RenderFragment Tip;

    protected override void OnInitialized() { this.Tip = InitialTip; }
    public async Task HandleSelect(TItem item, RenderFragment<TItem> contentFragment)
    {
        this.Tip = contentFragment.Invoke(item);
        this.show = false;
        StateHasChanged();
        await this.OnSelected.InvokeAsync(item);
    }

    public void Reset()
    {
        this.Tip = InitialTip;
    }
}